#include <stdio.h>
#include <string.h>

//作用域与生命周期=====================
// 作用域==========
// 变量的作用域
//局部变量的作用域：就是变量所在的局部范围
//全局变量的作用域：整个工程

//int liang = 100; // 全局变量
//
//int main()
//{
//	printf("hh\n");
//	printf("1 %d\n", liang);
//	{
//		printf("2 %d\n", liang);
//		int a = 10;
//		printf("a = %d\n", a);
//
//	}
//	printf("3 %d\n", liang);
//
//	return 0;
//}

//要声明一下变量(从隔壁要变量)
//extern int liang;
//
//int main()
//{
//	printf("%d\n", liang);
//
//	return 0;
//}

//生命周期=========
//变量的生命周期:变量的创建与销毁之间的时间段
// 
//局部变量的生命周期：进局部范围生命开始，出局部范围生命结束
//全局变量的生命周期：程序的生命周期

//int main()
//{
//	{
//		int a = 10;
//		printf("%d\n", a);
//	}
//
//	return 0;
//}

//常量==============================

//#define max 1000
//int main()
//{
//	////1.字面常量===
//	//'a';//字符
//	//10;
//	//"adqwqe";//字符串
//	//3.14;
//
//	//2.const修饰的常变量===
//	//const int num = 10;//变量  加了const变成常变量 - 具有常属性（不能被改变的属性），本质上还是变量！
//	//num = 20;
//	//printf("num = %d", num);
//
//	//int arr[10] = { 0 };//arr是名称，创建数组，10个元素，后面会讲数组，现在引用！
//	//const int n = 10;//变量   验证需要常量的时候常变量不行  本质上是变量就是具有常属性而已
//	//int arr2[n] = { 0 };//n在指定数组大小时n是变量的，这里不行，要常量
//
//	//3.#define 定义的标识符常量===
//	//max = 10000;//错误的，max不能改  前面的#define max 1000 是标识符常量,在里面定义也行
//	/*int n = max;
//	printf("n = %d", n);*/
//
//	return 0;
//}

//性别
//enum sex //enum枚举关键字，别怕拿这个做列子，以后会讲
//{
//	//这种枚举类型的变量的未来可能取值
//	//这是枚举常量要选择的
//	male = 1,//男  加了 = 1 是赋初值，赋上最开始的值
//	female,//女
//	secret//保密
//};
//
//int main()
//{
//	//4.枚举常量，是常量，它的值默认是从0开始的
//	//可以一一列举的常量  固定的选项
//
//	enum sex s = male;
//	printf("%d\n", male);
//	printf("%d\n", female);
//	printf("%d\n", secret);
//
//	return 0;
//}

//字符串就是一串字符 - 用双引号括起来的一串字符就是字符串
//注意字符串的结束标志会有隐藏的\0,\0不算字符串内容。

//int main()
//{
//	"holle";
//	"wole";
//
//	return 0;
//}

//int main()
//{
//	//字符数组 - 数组是一组形同类型的元素数
//	//字符串在结尾处隐藏了\0的字符
//	//\0是字符串的结束标志
//	//char arr[] = "holle";//当不写[]里内容，他就会根据后面的字符串内容来初始化它
//	//按f10 - 调试 - 窗口 - 监视，来看字符串隐藏起来的\0
//
//	char arr1[] = "abc";//双引号是一串字符
//	char arr2[] = { 'a','b','c','\0'};//单引号是单个字符  加\0让计算机知道结束不用在继续
//
//	//求字符串长度:strlen
//	printf("%d\n", strlen(arr1));
//	printf("%d\n", strlen(arr2));
//	//int len = strlen("abc");//strlen会出现未定义，原因是没有引用头文件：#include <string.h>
//	//printf("%d\n", len);//\0是表示字符串结束标志而存在的，求长度是不算在里面的
//	//打印字符串
//	/*printf("%s\n", arr1);
//	printf("%s\n", arr2);*/
//
//	return 0;
//}

//转义字符:转变它原来的意思
//比如想输入\na,结果是跳到下一行输入a
//int main()
//{
//	//printf("c:\test\test.c");
//	printf("ab\ncd");
//
//	return 0;
//}

//int main()
//{
//	//printf("(你好吗??)");//?? --] - 三字母词  以前会，现在不会了
//	//(你好吗]  以前呈现的内容
//	//printf("%c\n", '\'');//%c是打印字符 如果想打'号前面不加\是会报错的，在想打的'号前加\就能打出来了
//	printf("%s\n", "abc");//%s是打印字符串
//	printf("%s\n", "a");//字符串也是可以打印单个字符的
//	printf("%s\n", "\"");//在想打的字符前加\它就是普通的字符了
//	printf("%s\n", "'");//它会和前面的组成一对，只要不是和前面相同就不用打\了
//	printf("c:\\test\\test.c");//\\是防止被解释为一个转义序列符
//	printf("\a");//电脑会响
//	//其他的转义字符：\b退格 \f进纸符 \n换行 \r回车 \t水平制表符 \v垂直制表符
//	//特殊：\ddd是ddd表示1 - 3八进制数字 比如\130 \xdd是dd表示2个十六进制 比如\x30
//
//	//printf在打印数据的时候，可以指定打印的格式
//	//printf("%d", 100);   %d打印整数
//	//printf("%c", 'a');   %c打印单个字符
//	//printf("%s", "abc"); %s打印字符串
//
//	return 0;
//}

//看\ddd是ddd表示1 - 3八进制数字 比如\130 \xdd是dd表示2个十六进制 比如\x30
//注意不能用\ddd来表示\ddd,也不能用\xdd来表示\xdd
int main()
{
	printf("% c\n", '\130');//\130是\ddd类的所以是单符号
	//X -- ascll码值是88
	printf("%c\n", '\101');//A - 65 - 八进制 - 101
	

	return 0;
}
