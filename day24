#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>
#include<assert.h>
#include<string.h>

//练习
//int main()
//{
//	 //指针被释放后，指针里还有它的地址 - 野指针 - 不访问没事，但是只要访问就会报错，
//	 //所以释放完后的指针我们要手动设置为空指针，防止有人访问报错
//	
//
//	int (*  (*f)(int, int)  )(int);
//
//	return 0;
//}

//杨氏矩阵
//有一个数字矩阵左到右递增，上到下递增
//编写程序这样的矩阵中查找某个数字是否存在
//要求：时间复杂度小于O(N)

//1 2 3
//2 3 4
//4 5 6

//1 2 3
//4 5 6
//7 8 9
//int find(int arr[3][3], int a, int b, int k)
//{
//	int x = 0;
//	int y = b - 1;
//	while (x<a && y>=0)
//	{
//		if (arr[x][y] < k)
//		{
//			x++;
//		}
//		else if (arr[x][y] > k)
//		{
//			y--;
//		}
//		else
//		{
//			printf("arr[%d][%d]\n", x,y);
//			return 1;
//		}
//	}
//	return 0;
//}

//int find(int arr[3][3], int* a, int* b, int k)
//{
//	int x = 0;
//	int y = *b - 1;
//	while (x < *a && y >= 0)
//	{
//		if (arr[x][y] < k)
//		{
//			x++;
//		}
//		else if (arr[x][y] > k)
//		{
//			y--;
//		}
//		else
//		{
//			*a = x;
//			*b = y;
//			return 1;
//		}
//	}
//	return 0;
//}
//int main()
//{
//	int arr[3][3] = { 1,2,3,4,5,6,7,8,9 };
//	int k = 0;
//	scanf("%d", &k);
//	//找到1，找不到0
//	int x = 3;
//	int y = 3;
//	int ret = find(arr, &x, &y, k);
//	if (ret == 1)
//	{
//		printf("arr[%d][%d]\n", x, y);
//		printf("找到了\n");
//	}
//	else
//	{
//		printf("没有\n");
//	}
//	//我们要用O(1) - 效率高
//
//	//o(N)：N - 查找的次数最坏的情况下是N次，2N，3N
//	//N*N  N*(N-1) -- 都叫O(N)
//	//查找一个数字，比如7
//	//遍历的方法不满足要求
//	//int i = 0; 
//	//int j = 0;
//	//for ( i = 0; i < 3; i++)
//	//{
//	//	for ( j = 0; j < j; j++)
//	//	{
//	//		if (arr[i][j] == 7)
//	//		{
//
//	//		}
//	//	}
//	//}
//
//
//	return 0;
//}

//C语言就这几类
//数组
//字符串 
//数据结构
// 
//字符串的左旋
//内容：
//实现一个函数，可以左旋字符串中1个字符
//如：
//abcd左旋一个bcda
//abcd左旋两个cdab
//

//void string_left_rotate(char a[], int l)
//{
//	int i = 0;
//	int len = strlen(a);
//
//	for ( i = 0; i < l; i++)
//	{
//		//每次左旋转1个字符
//		char tmp = *a;//1.拿出来了
//		//2.把后面n-1个字符往前挪
//		int j = 0;
//		for ( j = 0; j < len-1; j++)
//		{
//			*(a + j) = *(a + j + 1);
//		}
//		//3.tmp放在最后
//		*(a + len - 1) = tmp;
//
//	}
//	
//
//}
//int main()
//{
//	char arr[10] = "abcdef";
//	int l = 4;
//	//char *p = "abcd"//这个是常量字符串，不能被改的
//	string_left_rotate(arr,l);
//	printf("%s\n",arr);
//
//	return 0;
//}

//进阶
//左逆序
//右逆序
//整体逆序
//三目反转发法
//void reverse(char* left, char* right)//整体逆序
//{
//	assert(left);
//	assert(right);
//	while (left<right)
//	{
//		int tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
//void string_left_rotate(char* a,int k)
//{
//	assert(a);
//	int len = strlen(a);
//	reverse(a,a+k-1);//左
//	reverse(a+k,a+len-1);//右
//	reverse(a,a+len-1);//整体
//}
//int main()
//{
//	char arr[10] = "abcdef";
//	int l = 4;
//	string_left_rotate(arr,l);
//	printf("%s\n",arr);
//
//	return 0;
//}

//判断一个字符串旋转是否为另一个字符串旋转之后的字符串
//int is_string(char* str1, char* str2)
//{
//	int i = 0;
//	int len = strlen(str1);//
//
//	for (i = 0; i < len; i++)
//	{
//		//每次左旋转1个字符
//		char tmp = *str1;//1.拿出来了
//		//2.把后面n-1个字符往前挪
//		int j = 0;
//		for (j = 0; j < len - 1; j++)
//		{
//			*(str1 + j) = *(str1 + j + 1);
//		}
//		//3.tmp放在最后
//		*(str1 + len - 1) = tmp;
//		if (strcmp(str1, str2) == 0)
//		{
//			return 1;
//		}
//	}
//	return 0;
//}
//int main()
//{
//	char arr1[] = "AABCD";
//	char arr2[] = "DAABC";//每旋转一个比较
//	int ret = is_string(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("yes\n");
//	}
//	else
//	{
//		printf("no\n");
//	}
//	return 0;
//}

//另一个解法
int is_string(char* str1, char* str2)
{
	//先判断str2的长度,如果长度不相等肯定不是旋转得到的
	if (strlen(str1) != strlen(str2))
	{
		return 0;
	}

	//1.str1字符串后面追加一个str1
	//AABCDAABCD
	int len = strlen(str1);
	strncat(str1, str1, len);//这个库函数是加上字符串长度(可以是自己的)
	//判断str2是否为str1的字符串
	char* ret = strstr(str1, str2);//判断后面的字符串是前面的字符串的子串，返回的值是后面的字符串在前面字符串中的地址，找不到返回空指针,返回的地址类型全是字符指针类型
	//if (ret == NULL)//可以简化
	//{
	//	return 0;
	//}
	//else
	//{
	//	return 1;
	//}
	//已知真表示1，假表示0
	return ret != NULL;//为真返回1，为假返回0
	//AABCDAABCD
	//DAABC
	return 0;
}
//ABCDA
//BCDAA
//....穷举法
// 
//可以写成
//AABCDAABCD
//包含了所有的可能性
int main()
{
	char arr1[20] = "AABCD";

	char arr2[] = "DAABC";//每旋转一个比较
	int ret = is_string(arr1, arr2);
	if (ret == 1)
	{
		printf("yes\n");
	}
	else
	{
		printf("no\n");
	}
	return 0;
}

//int main()
//{
//	char arr[20] = "hello ";
//	//hello bit\0
//	//strcat(arr, "wolrd");
//	//strcat(arr, arr);//不能加自己
//	strncat(arr, arr,5);//自己可以给自己加
//	printf("%s\n", arr);
//
//	return 0;
//}

//指针学完梳理
//一级指针
//二级指针
// 
//整型指针
//字符指针
//...
// 
//结构体指针
// 是指向一个某一个类型的指针

//函数指针
// 回调函数
// 
// 
//数组指针
// 一维数组
// 二维数组
// 
// 整型数组
// 字符数组
// ...
// 
// 指针数组
// 
//
//指针运算
// 解引用
// 指针+-整数 - 指针类型
// 指针-指针 - 得到的就是得到指针和指针之间的元素个数两个指针必须是同一类型或指向同一块空间的
// 指针的关系运算 
//
