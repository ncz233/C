#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>
#include<stdlib.h>

//预处理
//预定义符号介绍
//__FILE__  //进行编译的源文件
//__LINE__  //文件当前的行号
//__DATE__  //文件别编译的日期
//__TIME__  //文件被编译的时间
//__STDC__  //如果编译器遵循ANSI C,其值为1，否则未定义
//int main()
//{
//	//printf("%s\n", __FILE__);//代码所在的文件
//	//printf("%d\n", __LINE__);//代码所在的行号
//	//printf("%s\n", __DATE__);//代码所在的日期
//	//printf("%s\n", __TIME__);//代码所在的时间
//	//printf("%s\n", __FUNCTION__);//代码所在的函数名
//
//	//写文件
//	int i = 0;
//	FILE* pf = fopen("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\test.txt", "a+");
//	if (pf == NULL)
//	{
//		perror("fopen");
//		return 0;
//	}
//	for ( i = 0; i < 10; i++)
//	{
//		fprintf(pf, "%s %d %s %s %d\n", __FILE__, __LINE__, __DATE__, __TIME__, i);
//	}
//
//	fclose(pf);
//	pf == NULL;
//
//
//	printf("%d\n", __STDC__);//当前编译器不支持__STDC__，也不支持ANSI C标准
//	return 0;
//}

//#define 定义符号或定义宏的

//举个列子
// #define MAX 1000
// #define reg register //为 register这个关键字，创建一个简短的名字
// #define do_forever for(;;) //用更形象的符号来替换一种实现
// #define CASE break;case //在写case语句的时候自动把break写上。
// 如果定义的stff过长，可以分为几行写，除了最后一行外，每行的后面都加一个反斜杠(续行符)。
//  #define DEBYG_PRINT prinft("file:%s\tline:%d\t \
//   date:%s\ttime:%s\n" \
//   __FILE__,__LINE__, \
//   __DATE__,__TIME__ )
// 
//#define M 1000//定义符号
//#define reg register//register的名字太长了改小点
//#define do_forever for (;;)//定义循环

//int main()
//{
//	int m = M;
//	do_forever;//死循环for (;;);
//	printf("%d\n", m);
//
//	return 0;
//}

//#define CASE break;case
//#define M 1000//#define定义的时候最好不要加分号(;)容易出错，而且没用
//
//int main()
//{
//	int n = 0;
//
//	switch (n)
//	{
//	case 1:
//	CASE 2://替换后break;case 2:
//	CASE 3:
//
//	}
//
//	int a = 10;
//	int b = 0;
//	if (a>10)
//	{
//		b = M;
//	}
//	else
//	{
//		b = -M;
//	}
//
//	return 0;
//}

//#define 定义宏
//允许把参数替换到文本中，这种实现通常称为宏(macro)或定义宏(defube macro)
// 声明方式
// #define name( parament-list ) suff
// parament-list参数列表 可以替换到 宏的suff中
// 注意
// name必须跟后面的括号紧紧挨着，不能加空格
// 如果两者之间有任何空白存在，参数列表就会被解释为stuff的一部分
//

//尽量加上括号别吝啬
//#define SOUARE(X) ((X)*(X))//最好括起来，严谨
//#define DOUBLE(X) ((X)+(X))//同上一劳永逸
//
//int main()
//{
//	//printf("%d\n", SOUARE(3));
//	////被替换成
//	//printf("%d\n", 3*3);
//
//	//printf("%d\n", SOUARE(3+1));//7,不是16，括起来是16了
//	//宏时替换的不是先计算的，是替换进去在计算。参数不经过任何运算直接传进去
//
//	printf("%d\n", 10*DOUBLE(4));//44,不是80，括号括起来是80不是44
//	//被替换成
//	//printf("%d\n", 10 * (4) + (4));
//
//
//	return 0;
//}

//#define 替换规则
// 1.调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号，如果是，他们首先被替换
// 2.替换文本随后被插入到程序中原来文本的位置，对于宏，参数名被他们的值替换
// 3.最后，再次对结果文件进行扫描，看着它是否包含任何由#define定义的符号。如果是，就重复上述处理过程
//
//注意
// 函数参数和#define定义中可以出现其他#defien定义的变量，但对于宏，不能时出现递归
// 当预处理器搜索#define定义的符号的时候，字符串常量的内容并不被搜索
//
//#define M 100
//#define MAX(X,Y) ((X)>(Y)?(X):(Y))
//int main()
//{
//	int max = MAX(101, M);
//	//我们要先把参数替换了M替换成100，然后在进行MAX的替换，扫描是否还有其他的#define的，如果有重复之前的步骤
//	printf("M = %d", M);//"M = %d"不会被搜素到
//
//	return 0;
//}

//#和## - 只能在宏里可以用
//可以把参数插入到字符串中
//

//#
//void print(int x)
//{
//	printf("the value of x is %d\n", x);//函数方式完成很难
//}
//int main()
//{
//	//printf("hello world\n");
//	//printf("hello " "world");
//
//	int a = 10;
//	print(a);
//	//打印the value of a is 10
//	int b = 20;
//	print(b);
//	//打印the value of a is 20
//	int c = 30;
//	print(c);
//	//打印the value of a is 30
//
//
//	return 0;
//}

//加上#号，就是不会把这个参数替换了，而是变成这个参数随对应的一个字符串
//#define PRINT(X,FORMAT) printf("the value of "#X" is" FORMAT"\n",X);
//int main()
//{
//	//printf("hello world\n");
//	//printf("hello " "world");
//
//	int a = 10;
//	PRINT(a,"%d");
//	//替换成
//	//printf("the value of ""a"" is %d\n", a);
//	//打印the value of a is 10
//	int b = 20;
//	PRINT(b,"%d");
//	//替换成
//	//printf("the value of ""b"" is %d\n", b);
//	//打印the value of a is 20
//	int c = 30;
//	PRINT(c,"%d");
//	//替换成
//	//printf("the value of ""c"" is %d\n", c);
//	//打印the value of a is 30
//	float d = 5.5f;
//	PRINT(d,"%f");
//	//替换成
//	//printf("the value of ""d"" is ""%f""\n", d);
//
//	return 0;
//}

//##
//把两边的符号连成一个符号
//它允许宏定义从分离的文本片段创建标识符
//#define CAT(x,y) x##y
//int main()
//{
//	int class101 = 100;
//	printf("%d\n", CAT(class, 101));//两个符号合成一个符号，多个符号都可以
//	//替换成
//	printf("%d\n", class101);
//
//	return 0;
//}

//带有副作用的宏参数
//当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用，那么你在使用这个宏的时候可能出现危险，导致不可预测的后果，副作用就是表达式求值的时候出现的永久性效果
// 例如
//int a = 1; //让b = 2
//int b = a + 1; // b = 2  但a = 1
//int b = ++a;//  b = 2  但是a = 2，有副作用了

//#define MAX(X,Y) ((X)>(Y)?(X):(Y))
//int main()
//{
//	int a = 5;
//	int b = 8;
//	int m = MAX(a++, b++);
//	//转换成
//	//int m = MAX(a++,b++) ((a++)>(b++)?(a++):(b++));
//	//                       5     8      x    9    
//	printf("m = %d\n", m);//9
//	printf("a = %d b = %d\n", a,b);
//	return 0;
//} 

//宏和函数的对比
//优点
// 宏的函数规模和速度方面更胜一筹
// 函数参数必须声明特定的类型，所以函数只能在合适的表达式上使用。反之宏是类型无关的
//劣势
// 使用宏的时候，一份宏定义的代码将插入到程序中，除非宏比较短，否则可能大幅度增加程序的长度
// 宏是没法调用的
// 宏由于类型无关，也就不够严谨
// 宏可能会带来运算符优先级的问题，导致程序容易出现错误
//
//#define max(x,y) ((x)>(y)?(x):(y))
//int MAX(int x,int y)
//{
//	return x > y ? x : y;
//}
//
//int main()
//{
//	int a = 5;
//	int b = 8;
//	int m = max(a, b);
//	//int m = max(a,b) ((a)>(b)?(a):(b));
//
//	m = MAX(a, b);
//
//	return 0;
//} 

//宏有时候可以做到函数做不到的事情，比如：宏的参数可以出现类型，但是函数做不到
//#define MALLOC(num,type) (type*)malloc(num*sizeof(type))
//int main()
//{
//	//malloc(10 * sizeof(int));
//	//malloc(10 * int);
//	int* p = MALLOC(10, int);
//	//(int*)malloc(10 * sizeof(int));
//
//	return 0;
//}

//总结#define  函数
//代码长度
// 使用宏的时候，宏代码都会插入到程序中，除非宏比较短，否则可能大幅度增加程序的长度
// 函数代码只出现于一个地方；每次使用这个函数时，都调用那个地方的同一份代码
//执行速度
// 更快
// 存在函数的调用和返回的额外开销，所以相对慢一点
//操作符优先级
// 宏参数的求值是在所有周围表达式的上下文环境里，除非加上括号，否则临近操作符的优先级可能会产生不可预料的后果，所以建议宏在书写的时候多些括号
// 函数参数只在函数调用的时候求值一次，他的结果值传递给函数，表达式的求值结果更容易预测
//带有副作用的参数
// 参数可能被替换到宏体中的多个位置，所以带有副作用的参数求值可能会产生不可预料的结果
// 函数参数只在传参的时候求值一次，结果更容易控制
//参数类型
// 宏的参数与类型无关，只要对参数的操作是合法的，它就可以使用于任何参数类型
// 函数的参数是与类型有关的，如果参数的类型不同，就需要不同的函数，即使他们执行的任务不同的
//调试
// 宏不方便调试的
// 函数是可以逐语句调试的
//递归
// 宏不能递归的
// 函数可以递归
// 
//后面会学内联函数
// 结合了宏的优点，和函数的优点

//命名约定
// 一般来讲函数的宏使用语法很相似。所以语言本身没法帮我们区分二者。
// 那我们平时一个习惯是
//  把宏名全部大写
//  函数名不要全部大写

//#undef - 取消定义
//#define M 100
//int main()
//{
//	int a = M;
//	printf("%d\n", M);
//#undef M
//
//	return 0;
//}

//命令行定义
//linux系统中定义

//int main()
//{
//	int arr[M] = { 0 };
//	int i = 0;
//	for ( i = 0; i < M; i++)
//	{
//		arr[i] = i;
//	}
//	int j = 0;
//	for ( j = 0; j < M; j++)
//	{
//		printf("%d  ", i);
//	}
//
//
//	return 0;
//}

//条件编译
// 删除可惜，不删除碍事
//满足条件编译，不满足不编译
//
//#define PRINT//定义了它
//int main()
//{
//#ifdef PRINT//这个就会参与编译
//	printf("haha\n");
//#endif // PRINT
//	return 0;
//}

//常见的条件编译指令
// 

#if 0 //和注释的作用一样
#define M 1
#define PRINT
int main()
{
//#ifdef PRINT
//	printf("haha\n");
//#endif 
#if 1-2//非0为真参与编译，0为假不参与
	printf("hehe\n");
#endif // 1

#if M
	printf("hehe\n");
#endif

	return 0;
}
#endif

//多个分支的条件编译
//int main()
//{
//#if 1 == 1 //只能用常量
//	printf("hehe\n");//只要第一个成功就选第一个编译，以此类推和 || 一样
//#elif 2 == 2
//	printf("haha\n");
//#else
//	printf("hehe\n");
//#endif
//	return 0;
//}

//判断是否被定义
//2种
#define TEST 0//看他定义没定义，不看它的值
#define HEHE
int main()
{
	//1
	//和第一个一样。如果TEST定义，下面参与编译
#ifdef TEST
	printf("test1\n");
#endif
	//2
	//这个和上一个代表的意思是一样
#if defined(TEST)
	printf("test2\n");
#endif

	//3
	//如果HEHE不定义，下面参与编译,定义了不参与编译
#ifndef HEHE
	printf("hehe1\n");
#endif
	//4
	//这个和上一个代表的意思是一样
#if !defined(HEHE)
	printf("hehe2\n");
#endif

	return 0;
}

//头文件包含
// #include
//2种
// #include"本地文件包含" 
// #include<库文件包含>
//
// <>和""包含头文件的本质区别是：查找策略的区别
//"" 1.先在源文件所在目录下查找，2.如果找不到1,则在库函数的头文件目录下查找
//<> 直接区库目录下查找
//
//避免头文件的重复引用 ，在头文件中加上
// #pragma once
// 或
// #ifndef __name_H__ //没有就是真，执行
// #define __name_H__ //
// 内容
// #endif
int main()
{
	int a = 5;
	int b = 10;


	return 0;
}

//总结
//预处理指令
// #include
// #define
// #if
// #ifdef
// #endif
// #ifndef
// #else
// #elif
// #undef
//
//书，《C语言深度解剖》，《栈区栈帧》，《C陷阱与缺陷》
// 
//毕业了!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
