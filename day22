#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//前言：void*就像垃圾桶，什么地址都可以往里扔，都可以接收
//回调函数
//qsort快速排序的实现
//

//qsort函数应用
//void qsort(void* base,//base是存放待排序数据中第一个元素地址
//	size_t num,//排序数据元素个数
//	size_t size,//排序数据中一个元素的大小，单位是字节
//	int (*compar)(const void*, const void*)//用来比较待排序数据中的两个元素的函数
//);//void* 传什么地址都能接收
// 
//假设写出一个冒泡排序函数，让你排序字符串
//bubble_sort()
//strcmp比较字符串大小，对应的位置比较ascll值

//冒泡排序
//void bubble_sort(int arr[],int sz)
//{
//	int i = 0;
//	//冒泡排序趟数
//	for ( i = 0; i < sz - 1; i++)
//	{
//		//一趟
//		int j = 0;
//		for ( j = 0; j < sz-1-i; j++)
//		{
//			if (arr[j] > arr[j+1])
//			{
//				int tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//			}
//		}
//	}
//}
//void print_arr(int arr[], int sz)
//{
//	int i = 0;
//	for ( i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//}
//
//int main()
//{
//	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	print_arr(arr, sz);
//	bubble_sort(arr,sz);
//	print_arr(arr, sz);
//
//	return 0;
//}

//qsort - 库函数,必须提供两个数的变换
//
//int cmp_int (const void* a, const void* b)
//{
//
//	return *(int*)a - *(int*)b;//正序
//	//return *(int*)b - *(int*)a;//逆序
//}
//void print_arr(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//}
//void test1()
//{
//	int arr[] = { 1,3,5,7,9,2,4,6,8,0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//排序
//	qsort(arr, sz, sizeof(arr[0]), cmp_int);
//	//打印
//	print_arr(arr, sz);
//	return;
//}
//
//struct stu
//{
//	char name[20];
//	int age;
//};
//int sort_by_age(const void* a, const void* b)
//{
//	return ((struct stu*)a)->age - ((struct stu*)b)->age;
//	return ((struct stu*)a)->age - ((struct stu*)b)->age;
//}
//int sort_by_name(const void* a, const void* b)
//{
//	return strcmp(((struct stu*)a)->name, ((struct stu*)b)->name);
//}
//void test2()
//{
//	//使用qsort来排序结构体数据
//	struct stu s[3] = { {"zhangsan",20},{"lisi",23},{"wangwu",18} };
//	int sz = sizeof(s) / sizeof(s[0]);
//	//按照年龄来的
//	//qsort(s, sz, sizeof(s[0]), sort_by_age);
//	//按照姓名
//	qsort(s, sz, sizeof(s[0]), sort_by_name);
//}
//
////模仿qsort实现一个冒泡排序的通用算法
//void swap(char*a, char*b, int width)
//{
//	int i = 0;
//	for ( i = 0; i < width; i++)
//	{
//		char tmp = *a;
//		*a = *b;
//		*b = tmp;
//		a++;
//		b++;
//	}
//}
//
//void my_qsort(void* base,
//	int sz,
//	int width,
//	int (*cmp)(const void*a, const void*b))
//{
//	//趟数
//	int i = 0;
//	for ( i = 0; i < sz - 1; i++)
//	{
//		//一趟的排序
//		int j = 0;
//		for ( j = 0; j < sz - 1 - i; j++)
//		{
//			//两个元素的比较
//			//arr[j] arr[j+1]
//			if (cmp((char*)base + j * width,(char*)base + (j + 1) * width)>0)
//			{
//				//交换
//				swap((char*)base + j * width, (char*)base + (j + 1) * width,width);
//			}
//		}
//	}
//}
//
//void test3()
//{
//	int arr[] = { 1,3,5,7,9,2,4,6,8,0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//排序
//	my_qsort(arr, sz, sizeof(arr[0]), cmp_int);
//	//打印
//	print_arr(arr, sz);
//	return;
//}
//void test4()
//{
//	//使用qsort来排序结构体数据
//	struct stu s[3] = { {"zhangsan",20},{"lisi",23},{"wangwu",18} };
//	int sz = sizeof(s) / sizeof(s[0]);
//	//按照年龄来的
//	//my_qsort(s, sz, sizeof(s[0]), sort_by_age);
//	//按照姓名
//	my_qsort(s, sz, sizeof(s[0]), sort_by_name);
//}
//int main()
//{
//	//test1();
//	//test2();
//	test3();
//	//test4();
//	return 0;
//}

//指针和数组笔试解析
//sizeof(数组名) - 数组名表示整个数组的 - 计算的是整个数组大小
//&数组名 - 数组名表述整个数组，取出的是整个数组的地址
//除此之外，所有的数组名都是数组首元素地址
//strlen是从哪一个开始算的
//地址的大小都是一样的
int main()
{
	//int a[] = { 1,2,3,4 };
	//printf("%d\n", sizeof(a));//16 整个
	//printf("%d\n", sizeof(a+0));//4/8  a+0是数组第一个元素地址，sizeof（a+0）计算的地址大小
	//printf("%d\n", sizeof(*a));//4  *a是数组第一个元素，sizeof（*a）计算的是第一个元素的大小
	//printf("%d\n", sizeof(a+1));//4/8  a+1是第二个元素地址，sizeof(a+1)计算地址的大小
	//printf("%d\n", sizeof(a[1]));//4  计算的是第二个元素的大小

	//printf("%d\n", sizeof(&a));//4/88  &a虽然数数组的地址，但是也是地址，sizeof(&a)计算的是一个地址的大小
	//printf("%d\n", sizeof(*&a));//16  计算的是数组的大小
	//printf("%d\n", sizeof(&a+1));//4/8  数组后面的空间的地址
	//printf("%d\n", sizeof(&a[0]));//4/8  取出第一个元素地址
	//printf("%d\n", sizeof(&a[0]+1));//4/8  第一个元素加1的地址

	//char arr[] = { 'a','b','c','d','e','f' };
	//printf("%d\n", sizeof(arr));//16  整个
	//printf("%d\n", sizeof(arr+0));//4/8  第一个地址
	//printf("%d\n", sizeof(*arr));//1  数组名表示首元素
	//printf("%d\n", sizeof(arr[1]));//1  数组第二个元素
	//printf("%d\n", sizeof(&arr));//4/8  数组的地址
	//printf("%d\n", sizeof(&arr+1));//4/8  arr之后的地址
	//printf("%d\n", sizeof(&arr[0]+1));//4/8  第二个数的地址

	//printf("%d\n", strlen(arr));//随机
	//printf("%d\n", strlen(arr+0));//随机  首元素地址加0还是首元素地址
	////printf("%d\n", strlen(*arr));//错误  arr是数组首元素，加*解引用后是a，ascll表是97
	////printf("%d\n", strlen(arr[1]));//错误  第二个元素，元素是b，ascll是98
	//printf("%d\n", strlen(&arr));//随机  数组指针char(*)[6] =类型转换= 
	//printf("%d\n", strlen(&arr + 1));//随机-6  数组后面空间的地址
	//printf("%d\n", strlen(&arr[0] + 1));//随机-1  从b往后算

	//char arr[] = "abcdef";
	//printf("%d\n", sizeof(arr));//7  
	//printf("%d\n", sizeof(arr+0));//4/8  第一个地址
	//printf("%d\n", sizeof(*arr));//1  数组首元素地址
	//printf("%d\n", sizeof(arr[1]));//1  数组第二元素地址
	//printf("%d\n", sizeof(&arr));//4/8  char(*)[7]数组指针
	//printf("%d\n", sizeof(&arr+1));//4/8  数组指针后的地址
	//printf("%d\n", sizeof(&arr[0]+1));//4/8  数组第2个地址

	//printf("%d\n", strlen(arr));//6  长度
	//printf("%d\n", strlen(arr + 0));//6  从首元素开始的长度
	////printf("%d\n", strlen(*arr));//错误  a的ascll值是97
	////printf("%d\n", strlen(arr[1]));//错误  b的ascll值是98
	//printf("%d\n", strlen(&arr));//6  取出地址arr中的长度
	//printf("%d\n", strlen(&arr + 1));//随机  地址后面的长度
	//printf("%d\n", strlen(&arr[0] + 1));//5  第二个地址往后面的长度

	char* p = "abcdef";
	//printf("%d\n", sizeof(p));//4/8  地址
	//printf("%d\n", sizeof(p+0));//4/8  地址
	//printf("%d\n", sizeof(*p));//1  *p是首元素地址的解引用
	//printf("%d\n", sizeof(p[0]));//1  p[0] -> *(p+0)
	//printf("%d\n", sizeof(&p));//4/8  取出地址
	//printf("%d\n", sizeof(&p+1));//4/8  地址后面的地址
	//printf("%d\n", sizeof(&p[0]+1));//4/8  第二个元素地址

	printf("%d\n", strlen(p));//6  地址中首元素往后的长度
	printf("%d\n", strlen(p + 1));//5  地址中从第二元素往后的长度
	//printf("%d\n", strlen(*p));//错误  a的ascll值是97
	//printf("%d\n", strlen(p[0]));//错误  b的ascll值是98
	printf("%d\n", strlen(&p));//随机  取出地址的地址的长度。
	printf("%d\n", strlen(&p + 1));//随机  取出地址的地址后的长度
	printf("%d\n", strlen(&p[0] + 1));//5  地址中第二元素往后的长度
	return 0;
}
