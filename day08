#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//函数的递归:把大事化小
// 递归策略：只需要少量的程序就可以描述出解题过程所需要的多次重复计算，打大减少程序的代码量
//函数直接或间接调用自己的编程技巧叫递归

//简单的递归
//int main()//代码自己跑死了
//{
//	printf("hehe");
//	main();//函数自己调用自己容易出现栈溢出错误
//
//	return 0;
//}

//递归例子:无符号整数，打印它的每一位
//两个必要条件，缺一必错。
//1.存在限制条件，当满足这个条件的时候，递归不再继续
//2.每次递归调用之后越来越接近这个限制条件
//void print(unsigned int x)
//{
//	if (x>9)//这个是条件，没有它递归会一直持续下去，直到栈溢出报错。
//	{//print(x / 10);这个是递归返回值会越来越小逼近于递归跳出的条件判断，直到不符合条递归跳出的件判断，才停下来
//		print(x / 10);//这里要调用自己也就是print函数，因为没执行完，下面的printf不能打印。必须执行完调用的print函数。才返回到主print的时候代码才在往下执行。(总结：一直递归下去直到最后一个执行完成，然后一层层返回来。)
//	}
//	printf("%d",x % 10);//要if语句中的代码执行完才能打印
//	return;
//}
//int main()
//{
//	unsigned int a = 0;//unsigned是无符号整型
//	scanf("%u ", &a);
//	//函数自己调用自己
//	print(a);//print自己可以打印参数部分数字的每一位
//
//	return 0;
//}

//有两个必要条件还是会出错：  推荐个程序员的知乎的网站：https://stackoverflow.com 要求英文比较好
// 1：不能死递归，都有跳出条件，每次递归逼近跳出条件
// 2.递归层次不能太深
// 
//内存的划分
//栈区：栈区存的是临时的变量 如：全局变量、函数形参  
//堆区：动态内存分配的 如：malloc/free、calloc、realloc
//静态区：放两个东西：全局变量、静态变量

//void cuo(int x)
//{//跑死了，原因栈区满了。每一个函数调用都要在栈区上给自己分配一块空间。
//	if (x < 10000)
//	{
//		cuo(x + 1);
//	}
//	return;
//}
//int main()
//{
//	cuo(1);
//
//	return 0;
//}

//编写函数不允许创建临时变量，求字符串长度
//#include <string.h>
//int my_strlen(char* x)//因为它传过来的是数组第一个地址也就是'h'
//{
//	//普通的函数求字符串长度
//	/*int y = 0;
//	while (*x != '\0')
//	{
//		y++;
//		x++;
//	}
//	return y;*/
//	if (*x != '\0')
//	{ //如果改成my_strlen(x++)，会先计算后++，传进去是错的。my_strlen(++x)，虽然传进去是对的，留下的是+之后的结果，就是x不是以前的x了
//		return 1 + my_strlen(x + 1);//加一也就是'h'字符的下一位是'o'
//	}
//	else
//	{
//		return 0;
//	}
//}
//
//int main()
//{
//	char a[] = "hoo";
//	//strlen求字符串长度时，会遇到"\0"它是字符串结束标志，在计算长度时候不算它
//	//
//	//模拟实现一个strlen函数
//	printf("%d\n", my_strlen(a));//strlen求字符串长度
//
//	return 0;
//}

//递归与迭代
//递归不一定是循环
//迭代是不断重复做一件事情
//求n的阶乘

//正常写
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	int b = 0;
//	int c = 1;
//	//迭代
//	for ( b = 1; b <= a; b++)
//	{
//		c = c * b;
//	}
//	printf("%d\n", c);
//	return 0;
//}

//函数写
//int fac(int n)
//{
//	if (n<=1)
//	{
//		return 1;
//	}
//	else
//	{
//		return n * fac(n - 1);//n * fac(n - 1) 阶乘公式
//	}
//	return 0;
//}
//
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	int b = fac(a);
//	printf("%d\n", b);
//
//	return 0;
//}
//有一些功能：可以使用迭代的方式实现，也可以使用递归

//求第n个斐波那契数：前两个之和是第三个数
//递归可以求解，但是效率太低
//如果数字过大，效率会越来越低 - 重复大量的计算
//int z = 0;
//int fib(int n)
//{
//	//统计第三个斐波那契数的计算机次数
//	if (n == 3)
//	{
//		z++;
//	}
//	if (n <= 2)
//	{
//		return 1;
//	}
//	else
//	{
//		return fib(n - 1) + fib(n - 2);
//	}
//	return 0;
//}
//
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	int b = fib(a);
//	printf("%d\n", b);
//	printf("z = %d\n", z);
//
//	return 0;
//}

//循环解决
//int fib(int x)
//{
//	int a = 1;
//	int b = 1;
//	int c = 1;
//	while (2<x)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		x--;
//	}
//	return c;
//
//}
//
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	int b = fib(a);
//
//	printf("%d\n", b);
//
//	return 0;
//}

//汉诺塔
//青蛙跳台阶

//练习
//1 - 100 带有9的数字
//int main()
//{
//	int a = 0;
//	int b = 0;
//	for ( a = 0; a < 101; a++)
//	{
//		if (a%10 == 9)
//		{
//			b++;
//		}
//		if (a/10 == 9)
//		{
//			b++;
//		}
//	}
//	printf("%d", b);
//
//	return 0;
//}

//计算1/1-1/2+1/3-1/4+1/5......-1/100.
//int main()
//{
//	int a = 0;
//	float b = 0;
//	int c = 1;
//	for ( a = 1; a < 101; a++)
//	{
//		/*if (a%2 == 0)
//		{
//			b -= 1.0 / a;
//		}
//		if (a%2 == 1)
//		{
//			b += 1.0 / a;
//		}*/
//		b += c*1.0 / a;//-1/a是小数，数学知识
//		c = -c;
//		
//	}
//	printf("%f", b);
//
//	return 0;
//}

//求10个整数最大值
//int main()
//{
//	int a[] = { -1,-2,-3,-4,-5,-6,-7,-8,-9,-10 };
//	int b = 0;
//	int c = a[0];//如果是c = 0，那负数就比不了了
//	for ( b = 0; b < 10; b++)
//	{
//		if (a[b]>c)
//		{
//			c = a[b];
//		}
//	}
//	printf("%d", c);
//
//	return 0;
//}

//9*9乘法表

//int main()
//{
//	int a = 1;
//	for ( a = 1; a < 10; a++)
//	{
//		int b = 0;
//		for ( b = 1; b <= a; b++)
//		{
//			printf("%d*%d=%-2d ", a, b, a * b);//2,输出结果打印2位，不够的话用空格填充。右对齐，-2是左对齐。
//		}
//		printf("\n");
//	}
//	return 0;
//}

//
int add()
{
	int a = 0;
	return a;
}
int main()
{
	int a = 0;
	return 0;
}
