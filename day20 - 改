#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>
#include<math.h>
#include<string.h>

//int i;//这个是全局变量。所有int类型不初始化默认是0
//int main()
//{
//	i--;
//	//sizeof这个操作符，算出来的结果的类型是unsigned int。
//	//而i是有符号的，有符号和无符号比较大小时候，会先把有符号整型转化成无符号整型，（算术转换）
//	//i等于-1，然后被解读成无符号整型，因为-1在内存中是32个1，被解读成无符号，无符号是正整数所有位都是有效位，结果是一个超级大的数字
//	if (i>sizeof(i))
//	{
//		printf(">");
//	}
//	else
//	{
//		printf("<");
//	}
//	return 0;
//}

//求Sn = a+aa+aaa+aaaa+aaaaa+......
//int main()
//{
//	int a = 0;
//	int b = 0;
//	scanf("%d %d", &a,&b);
//	int i;
//	int sum = 0;
//	int ret = 0;
//	for (i = 0; i < b; i++)
//	{
//		ret = ret * 10 + a;
//		sum += ret;
//		printf("%d\n", sum);
//	}
//	printf("%d\n",sum);
//
//	return 0;
//}

//写一个函数arr数组的内容，不使用函数,下标使用指针
//arr是一个整型一堆数组

//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int *p = arr;
//	int* pn = arr + sz - 1;
//	int i = 0;
//	while (p <= pn)
//	{
//		printf("%d", *p);
//		p++;
//	}
//	//for ( i = 0; i < sz; i++)
//	//{
//	//	printf("%d", *(p+1));
//	//}
//	
//	return 0;
//}

//求出0 - 100000之间所有的“水仙花数”并输出
//“水仙花数”是指一个n位数，其各位数字的n次方之和确好等于该数本身
//如153 = 1^3+5^3+3^3,就是位数是

//int main()
//{
//	int i = 0;
//	for ( i = 0; i <= 10000; i++)
//	{
//		//判断i是否为自幂数
//		//计算i的位数
//		int n = 1;//为什么是1 不是0，因为如果是小于10的数会直接不循环，不循环是0，没有数是0位
//		int tmp = i;
//		while (tmp/10)//(tmp/10)这个是值，不会跟着tmp/10变少的，所以我们需要一个条件
//		{
//			n++;
//			tmp /= 10;//这个就是条件
//		}
//
//		//计算i的每一位的n次方之和
//		tmp = i;
//		int sum = 0;
//		while (tmp)
//		{
//			sum += pow(tmp % 10, n);//pow是开平方函数
//			tmp /= 10;
//		}
//		//判断
//		if (sum == i)
//		{
//			printf("%d\n", i);
//		}
//	}
//	return 0;
//}

//int main()
//{
//	unsigned long pu[] = { 6,7,8,9,10 };
//	unsigned long* pu1;
//	pu1 = pu;
//	*(pu1 + 3) += 3;//这个是先算（）括号里的pu1加3是指向9，9在解引用拿出来，然后9+3 = 12
//	printf("%d\n", *pu1);
//	printf("%d\n", *(pu1+3));
//
//	return 0;
//}

#include<assert.h>
void nixu(char x[], int y)
{
	assert(x != NULL);
	char *a = x;
	char *b = x + y - 1;
	while (a < b)
	{
		int z = *a;
		*a = *b;
		*b = z;
		a++;
		b--;
	}
}
int main()
{
	char arr[] = "abcdef";
	int len = strlen(arr);
	nixu(arr, len);
	printf("%s\n", arr);

	return 0;
}
