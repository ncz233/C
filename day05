#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//getchar的返回类型是int 因为getchar读取的是字符，而字符本质上是ascll值形式存储，ascll值是整型。
//getchar的返回的不一定是asccm值，有可能返回EOF，EOF本质上是-1，-1是不可能是asccm值的，它就是个整数，所以是整型
//int main()
//{
//	char a[20] = { 0 };
//	printf("输入密码：");
//	scanf("%s", a);//缓冲区有东西是 密码\n \n是回车，回车是激活scanf函数的。
//	//它拿走了密码，没拿走\n。记住scanf只能拿空格前面的数字，后面的留在缓冲区了，一个getchar只能拿走\n前面的密码
//	//gets直接在缓存区拿走，它是拿一行，现在没讲。
//	printf("确认密码:");
//	//清理缓冲区 单个内容
//	//getchar();//getchar是读取缓存区的数据 处理\n，不会对下面的造成影响，它没有归宿
//	//清理缓冲区多个字符
//	int duo = 0;
//	while ((duo = getchar()) != '\n')//记住符号\n是字符，记得加上''号
//	{
//		;
//	}
//	int ch = getchar();
//	if (ch == 'y')
//	{
//		printf("确认密码");
//	}
//	else
//	{
//		printf("确认失败");
//	}
//
//	return 0;
//}

//练习2
//
//int main()
//{
//	int ch = 0;
//	while ((ch = getchar()) != EOF)
//	{
//		if (ch<'0' || ch>'9')//字符0和字符9，ascll表
//		{
//			continue;
//			putchar(ch);
//		}
//	}
//
//	return 0;
//}

//随着使用多，初始化个数会增加，以后找费劲。
//int main()
//{
//	int a = 1;//初始化（表达式1）
//	//scanf("%d", &a);
//	while (10 >= a)//判断部分（表达式2）
//	{
//		printf("%d ", a);//循环语句
//		a++;//调整部分（表达式3）
//	}
//	return 0;
//}

//for
//for（初始化（表达式1）；判断（表达式2）；调整（表达式3））
// for初始化只能执行1次
//循环语句；
//int main()
//{
//	int a = 0;
//	
//	for (int a = 1; 10 >= a; a++)
//	{
//		if (5 == a)
//		{
//			//break;// for语句中break也是终止循环的意思
//			continue;//不会有死循环，跳过continue后面代码的部分，但是上来还是要执行a++的
//		}
//		printf("%d ",a);
//	}
//	return 0;
//}

//1.不可在for循环体内修改循环变量，防止for循环失去控制
//int main()
//{
//	int a = 0;
//
//	for (a = 1; 10 >= a; a++)
//	{
//		
//		printf("%d ", a);//循环体体内不要修改循环变量，防止循环失去控制
//		//a = 5;//会死循环6
//		//a++;//1 3 5 7 9
//		int b = 0;
//		//for语句可以嵌入for语句
//		for ( b = 0; b < 10; a++)//a++是a的调整不是b的调整，所以是死循环打印haha，循环内部修改循环变量是不可取的。
//		{
//			printf("haha");
//		}
//
//	}
//	return 0;
//}

//2.建议for语句循环控制变量的取值采用“先闭后开区间”写法
//int main()
//{
//	int a[10] = {0};//数组是通过下标来访问的
//	int b = 0;
//
//	for (b = 1; 10 > b; b++)//10>b是闭区间，也可以写9>=b是开区间，但是不推荐
//	{
//
//		printf("%d ", a[b]);
//		
//
//	}
//	return 0;
//}

//变种1：省略
//int main()
//{
//	//判断部分的省略 - 判断部分恒为真
//	for (;;)//初始化，判断，调整可以省略，但慎重省略，不建议省略
//	{
//
//		printf("haha\n");//无线haha
//
//
//	}
//	return 0;
//}

//省略给我们带来不便
//int main()
//{
//	int a = 0;
//	int b = 0;
//	for (a = 0; a < 3; a++)//3次循环。如果前面的a=0省略。f10调试看的比较清晰。
//	{
//		for ( b = 0; b < 3; b++)//3次循环。如果前面的b=0省略，b循环3此后出来后遇到for a的循环又循环去，但是b这是已经变成3了进不去了后截止跑到for a又循环一次，以此类推a循环到3次b都不会再次循环，所以是3个haha。如果加上b=0拿b不管等于多少到这里都等于0.
//		{
//			printf("haha\n");
//		}
//	}
//	
//	return 0;
//}

//变种2：一个for两个循环变量控制
//int main()
//{
//	int a = 0;
//	int b = 0;
//	for (a=0 ,b=0 ; a<2 && b<5; a++, b++)
//	{
//		printf("haha\n");
//	}
//
//	return 0;
//}

//练习
//int main()
//{
//
//	int a = 0;
//	int b = 0;
//	for (a = 0,b = 0; b = 0; a++,b++)//b=0，表达式为假，所以不循环，0次循环，b == 0，能循环1次。
//	{
//		b++;
//	}
//	return 0;
//}

//do...while循环：先执行，后判断，和while反过来
//do
//		循环语句(可能是一块代码)
// while（表达）
//do...while循环的循环至少执行一次，使用场景有限，所以不是经常使用，
//int main()
//{
//	int a = 1;
//	do
//	{
//		if (a == 5)
//		{
//			//break;//跳出循环
//			continue;//跳过continue后面的代码，但是后面的判断（a<=10）需要执行
//		}
//
//		printf("%d\n", a);
//		a++;
//	} while (a<=10);
//
//	return 0;
//}

//最后练习利用while， for， do...while
//计算n的阶乘
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 1;
//	scanf("%d", &b);
//
//	for (int a = 1; a <= b; a++)
//	{
//		c *= a;
//		
//	}
//	printf("%d ", c);
//
//	return 0;
//}


//计算1-10阶乘加起来
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 1;
//	int d = 0;
//
//	//for (int b = 1; b <= 3; b++)
//	//{
//	//	c = 1;//计算a的阶乘之前，把c初始为1
//	//	for (int a = 1; a <= b; a++)
//	//	{
//	//		c *= a;
//	//	}
//	//	d += c;
//	//}
//	//printf("%d ", d);
//	for (int b = 1; b <= 3; b++)
//	{
//		c *= b;
//		d += c;
//	}
//	printf("%d ", d);
//
//	return 0;
//}

//有序数组查找,折半查找或二分查找:每次都从中间找
//int main()
//{
//	int a[] = {1,2,3,4,5,6,7,8,9,10 };
//	int b = 7;//找7数字
//	int c = sizeof(a) / sizeof(a[0]);//数组总大小/数组单个元素大小=数组元素数量
//	int left = 0;
//	int right = c - 1;//计算机只会看下标
//	while (left <= right)
//	{
//
//		int mid = (right + left) / 2;//数组中间的值。一定在里头，因为中间的数字每算一次会变的
//		if (a[mid] < b)
//		{
//			left = mid + 1;//数组去除左边的一半，从后一位开始算
//		}
//		else if (a[mid] > b)
//		{
//			right = mid - 1;//数组去除右边的一半，从前一位开始算
//		}
//		else
//		{
//			mid += 1;
//			printf("恭喜找到了：%d",mid);
//			break;
//		}
//		
//	}
//	if (left>right)
//	{
//		printf("找不到");
//	}
//	return 0;
//}

//两边移动向中间汇聚
//#include<string.h>
//#include<Windows.h>
//int main()
//{
//	char a[] = "welcome to minecraft";
//	char b[] = "####################";
//	int left = 0;
//	int right = strlen(a) - 1;//计算机只会看下标，strlen符号计算
//
//	while (left<=right)
//	{
//		b[left] = a[left];
//		b[right] = a[right];
//		printf("%s\n", b);
//		Sleep(1000);//sleep睡觉 睡眠一秒。需要Windows.h头文件
//		system("cls");//system桌面 清空屏幕
//		left++;
//		right--;
//	}
//	printf("%s\n", b);
//
//	return 0;
//}

//输入密码3次，输入错误退出
//#include<string.h>//字符串函数，凡是前面3位是str都是需要头文件string.h的
//int main()
//{
//	int a = 0;
//	char b[20] = {0};
//	for (int a = 0; a < 3; a++)
//	{
//		printf("输入密码\n");
//		scanf("%s", b);//数组本来就是地址不需要取地址
//		//if (b == "123com")//两个字符串的比较，不能使用==，应使用strcmp.因为比较字符串的地址，地址比较是没有意义的，字符串有ascll码值应该比较它。
//		if (strcmp(b,"123.com") == 0)//strcmp是用于字符串比较的内容，比较的内容是ascll值如果相等是0
//		{
//			printf("登录成功\n");
//			break;
//		}
//		else
//		{
//			printf("密码错误\n");
//		}
//	}
//	if (a == 3)
//	{
//		printf("登录错误，即将退出\n");
//	}
//	return 0;
//}


//写一个猜数字游戏
// 随机1-100数
// 猜数字
//		猜对了，游戏结束
//		猜错了，告诉你猜大还是小，直到猜对为止
// 游戏可以一直玩
//
#include <stdlib.h>
#include <time.h>
void caidan()
{
	printf("####################\n");
	printf("#####1:开始游戏#####\n");
	printf("#####0:退出游戏#####\n");
	printf("####################\n");
}

void game()
{
	//猜数字
	//随机生成1-100
	//rand返回数值 0 - 32767之间的数字
	//时间 - 时间戳
	//srand((unsigned int)time(NULL));//srand设置一个随机的起点需要括号里面的值发生变化才能有随机数。time是时间戳是有参数的，NULL是空值：不想用它的参数，time返回类型是time_t的。但是我们需要的是srand的的值所以要强制转换成unsigned int形式就可以了。
	int b = rand() % 100 + 1;//rand无参数返回类型是整型，生成随机数字，但是第二次打开生成的随机数和第一次打开是一样的，不够随机。在调用rand还要sranf函数来设置随机数生成器
	//printf("%d", b);

	//猜数字
	int c = 0;
	while (1)
	{
		printf("请猜数字\n");
		scanf("%d", &c);
		if (c>b)
		{
			printf("大了\n");

		}
		else if (c<b)
		{
			printf("小了\n");
		}
		else
		{
			printf("对了\n");
			break;
		}
	}
}

int main()
{
	int a = 0;
	srand((unsigned int)time(NULL));
	do
	{
		caidan();
		printf("请输入");
		scanf("%d", &a);
		switch (a)
		{
		case 1:
			printf("开始游戏\n");
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("请重新输入\n");
			break;
		}

	} while (a);

	return 0;
}
