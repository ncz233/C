#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//练习

//void add(int x[])
//{
//	x[0] = 1;
//	x[1] = 2;
//}
//
//int main()
//{
//	int a[10] = { 0 };
//	add(a);//数组不加地址符号，因为数组就是一群相同元素的地址
//	//可以把数据带回来
//	return 0;
//}

//void add(int* a,int* b)
//{
//	*a = 1;//不是数组用加地址符号
//	*b = 2;
//}
//
//int main()
//{
//	int a = 0;
//	int b = 0;
//	add(&a,&b);//不是数组用加地址符号，
//	//可以把数据带回来
//	return 0;
//}

//打印几行乘法口诀表
//void add(int x)
//{
//	int a = 0;
//	for (a = 1; a <= x; a++)
//	{
//		int b = 0;
//		for (b = 1; b <= a; b++)
//		{
//			printf("%d * %d = %-2d ", a, b, a * b);
//		}
//		printf("\n");
//	}
//	
//}
//
//int main()
//{
//	int a = 0;
//	scanf("%d", &a);
//	add(a);
//	return 0;
//}

//int fac(int x)//返回来的时候，这个占的内存会销毁
//{
//	if (x == 5)
//	{
//		return 2;
//	}
//	else
//	{
//		return 2 * fac(x + 1);//要先把fac算出来
//	}
//}
//
//int main()
//{
//	int a = 2;
//	int b = fac(a);
//	printf("%d", b);
//
//	return 0;
//}

//反向排列 逆序，不能用库函数
//#include<string.h>
//int my_strlen(char* x)//这个用了两次
//{
//	int a = 0;
//	while (*x != '\0')
//	{
//		a++;
//		x++;
//	}
//	return a++;
//}
//
//void add(char x[], int y)
//{
//	int left = 0;
//	int right = y - 1;
//	while (left < right)
//	{
//		int a = 0;
//		a = *(x+left); //x[left];一样，x+0是a，x+
//		*(x + left) = *(x + right);
//		*(x + right) = a;
//		left++;
//		right--;
//	}
//
//	return;
//}
//
//int main()
//{
//	char a[] = "abcdef";
//	int b = my_strlen(a);//求出字符串个数
//	
//	add(a,b);//数组名a是数组a首元素地址
//	printf("%s\n", a);//fedcba
//
//	return 0;
//}

//用递归
//void add(char* x)
//{
//	char a = *x;//临时变量  把首字符元素放到a中   *x空了
//	int len = my_strlen(x);//求字符长度
//	*x = *(x + len - 1);//第一个字符位置放最后一个字符位置  *(x + len - 1)最后一个位置空了
//	//*(x + len - 1) = '\0';//最后一个位置替换成\0   最后一个位置成了'\0，没有'\0'它会从第二个数往后看，会看到第一个换成功数，然后会一直换第一个换成功数，而不是对应的数。
//	//加判断条件
//	if (my_strlen(x) >= 2)//到最后1个时候不需要逆序
//	{
//		add(x + 1);//递归下一个，第二个字符位置
//	}
//	
//	*(x + len - 1) = a;//要把最后一个字符位置上的字符放到第一位
//
//	return;
//}
//
//int main()
//{
//	char a[] = "abcdef";
//	add(a);
//
//	printf("%s\n", a);
//
//	return 0;
//}

//计算一个数的每一位之和
//int add(int x)
//{
//	if (9<x)
//	{
//		return add(x / 10) + x % 10;
//	}
//	else
//	{
//		return x;
//	}
//}
//
//int main()
//{
//	int num = 1729;
//	int sum = add(num);
//	printf("%d\n", sum);
//
//	return 0;
//}

//n的k次方
//float pow(int x, int k)
//{
//	if (k == 0)
//	{
//		return 1.0;
//	}
//	else if (0<k)
//	{
//		return x * pow(x, k - 1);
//	}
//	else//n的k负次方是 1分之n的k次方
//	{
//		return 1.0 / (pow(x, -k));//-k才会到这里，所以-k，-k之后，k是正数
//	}
//}
//
//int main()
//{
//	int n = 0;
//	int k = 0;
//	scanf("%d%d", &n, &k);
//	float a = pow(n, k);
//	printf("%f", a);
//
//	return 0;
//}

//数组 -- 一组数
//一组相同类型元素的集合
//

//#include <stdio.h>
//int main()
//{
//	//int arr[8];//int是数组每个元素类型，arr是数组名，[8]元素个数
//	//char ch[5];//[]括号
//	//int a = 8;
//	//int b[a];//c99语法支持：变长数组 - 数组得大小是变量，vs2019不支持变长数组
//
//	//int a = 10;//初始化
//	//int b[10] = { 1,2,3,4,5,6,7,8,9,10 };//完全初始化
//	//int b[10] = { 1,2,3,4,5};//不完全初始化，没初始化的变成0。
//	//int b[] = { 1,2,3,4,5};
//	//int c[5] = { 1,2,3,4,5 };//这两个一样
//
//	//字符数组
//	//char a[5] = { 'h','o','o' }; //不完全初始化，没初始化的变成0。0可以认为是\0
//	//char b[] = { 'h','o','o' };
//	//char b[3] = { 'h','o','o' }; //两个一样
//
//	//字符串数组
//	//char ch[5] = "hoo";//不完全初始化，没初始化的变成0。0可以认为是\0
//	//char ch[] = "hoo";//有4个元素:'h','o','o','\0'
//
//	//比较
//	char a[] = "hoo";//{h,o,o,\0}
//	char b[3] = {'h', 'o', 'o'};//{h,o,o}
//
//	printf("%d\n", strlen(a));//3
//	printf("%d\n", strlen(b));//随机值15
//	//数组长度和字符串长度是两个不同的东西
//	//printf("%s\n", a);
//	//printf("%s\n", b);//遇到\0才会停止
//
//
//	return 0;
//}

//数组是使用下标来访问的，下表是从0开始的。
//数组的大小可以通过计算得到。
//int b = sizeof(a) / sizeof(a[0]);

//int main()
//{
//	int a[10] = { 0 };
//	a[4] = 5;//[] - 下标操作符，把下标[4] 是5。
//	int i = 0;
//	printf("%d\n", sizeof(a));
//	printf("%d\n", sizeof(a[0]));
//	printf("----------------------\n");
//
//	int sz = sizeof(a) / sizeof(a[0]);
//	for ( i = 0; i < sz; i++)
//	{
//		printf("%d ", a[i]);
//	}
//	return 0;
//}

//一维数组：在内存中是连续存放的
//		随着数组下标的增长，地址由低到高变化的
//%p - 是按照地址打印的 - 十六进制打印
//%x - 是16进制
//int main()
//{
//	//printf("%x\n", 0x12);//12
//	//printf("%p\n", 0x12);//00000012  地址是有长度的
//
//	int a[10] = { 0 };
//	int i = 0;
//	for ( i = 0; i < 10; i++)
//	{
//		printf("&a[%d] = %p\n", i, &a[i]);//会发现间隔是4，因为每一个整型是4个字节
//	}
//
//	return 0;
//}


//连续存放的，找到一个就可以找打其他的
int main()
{
	
	int a[10] = {1,2,3,4,5,6,7,8,9,10};
	int* p = a;//数组名是数组首元素的地址,这个是整型指针
	int i = 0;
	for ( i = 0; i < 10; i++)
	{
		printf("%d ", *p);
		p++;
	}

	return 0;
}
