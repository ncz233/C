#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>

//操作符介绍

//算术操作符 + - * / %

//int main()
//{
//	//int a = 6 / 5;//整型除法，6/5=1...1，取的是商
//	//printf("%d\n", a);
//
//	//float a = 6 / 5;//浮点数也不行，因为6/5得到的数本来是1不是小数。1放在浮点数里还是1
//	//printf("%f\n", a);
//
//	float a = 6.0 / 5;//要想得到小数两端至少有一个数是浮点数，才能是浮点数的形式
//	printf("%f\n", a);//因为编译器默认6.0是double双精度的，但编译下来是float单精度，会丢失精度
//
//	return 0;
//}

//int main()
//{
//	int a = 7 % 3;//7%?=3...1 取的是余数  取模操作符两端必须是整数
//	printf("%d\n", a);//取的是余数
//
//	return 0;
//}

//位移>> << , 本身是不会被改变的
//int main()
//{
//	//int a = 2;//int占4个字节，是32bit
//	////00000000000000000000000000000010
//	////把a的二进制向左移动一位
//	//int b = a << 1;
//	////00000000000000000000000000000100
//	//printf("%d\n", b);//4
//
//	int a = 10;//int占4个字节，是32bit
//	//00000000000000000000000000001010
//	//把a的二进制向右移动1位
//	int b = a >> 1;
//	//00000000000000000000000000000101
//	printf("%d\n", b);//5
//
//	return 0;
//}

//int main()
//{
//	int a = -1;//int占4个字节，是32bit
//	//11111111111111111111111111111111   补码
//	//把a的二进制向右移动1位
//	int b = a >> 1;
//	//当前平台用的是算数右移：正数补0，负数补1.  逻辑右移是全补0
//	//11111111111111111111111111111111
//	printf("%d\n", b);//-1
//
//
//	return 0;
//}

//别写成负数
//int main()
//{
//	int a = 10;
//	int b = a << -5;//编译器都不知道怎么办，废代码
//
//	return 0;
//}

//位操作符 & | ^  只能是整数
//int main()
//{
//	//int a = 3;
//	//int b = 5;
//	////按(二进制位)位与
//	////相同为1，相异为0
//	//int c = a & b;
//	////00000000000000000000000000000011
//	////00000000000000000000000000000101
//	////00000000000000000000000000000001
//	//printf("%d\n", c);//1
//
//	//int a = 3;
//	//int b = 5;
//	////按(二进制位)位或
//	////有1取1没1取0
//	//int c = a | b;
//	////00000000000000000000000000000011
//	////00000000000000000000000000000101
//	////00000000000000000000000000000111
//	//printf("%d\n", c);//7
//
//	int a = 3;
//	int b = 5;
//	//按(二进制位)位异或
//	//相同为0，相异为1
//	int c = a ^ b;
//	//00000000000000000000000000000011
//	//00000000000000000000000000000101
//	//00000000000000000000000000000110
//	printf("%d\n", c);//6
//
//	return 0;
//}

//不能使用第三个变量
//int main()
//{
//	int a = 3;
//	int b = 5;
//	//交换
//	//int c = 0;
//	//printf("a = %d  b = %d\n", a, b);
//
//	//c = a;
//	//a = b;
//	//b = c;
//	//printf("a = %d  b = %d\n", a, b);
//	////数值太大会溢出
//	//a = a + b;
//	//b = a - b;
//	//a = a - b;//缺点怕溢出
//	//printf("a = %d  b = %d\n", a, b);
//
//	a = a ^ b;
//	b = a ^ b;
//	a = a ^ b;
//	printf("a = %d  b = %d\n", a, b);
//
//
//	return 0;
//}

//练习
//一共有多少个1
//int main()
//{
//	int a = 13;//不断向右位移，在按位与1.
//	int b = 0;
//	//00000000000000000000000000001101
//	//00000000000000000000000000000001
//	//00000000000000000000000000000001
//	while (a)
//	{
//		if (a%2 == 1)
//		{
//			b++;
//			a = a / 2;
//		}
//	}
//	printf("%d", b);
//
//	return 0;
//}

//int main()
//{
//	int a = 13;//不断向右位移，在按位与1.
// //把a的二进制第五位成1；
//	a = a | (1 << 4);
//	printf("%d\n", a);//29
//	//把a的二进制中的第五位成0
//	a = a & ~(1 << 4);
//	printf("%d\n", a);//13
//	
//
//	//00000000000000000000000000001101
//	//00000000000000000000000000000001
//	//1 << 4
//	//00000000000000000000000000010000
//	//00000000000000000000000000011101
//	//29
//	//00000000000000000000000000011101
//	//11111111111111111111111111101111
//	//00000000000000000000000000010000
//
//
//	return 0;
//}

//赋值操作符 = += -= *= /= >>= <<=
//
//int main()
//{
//	int a = 10;
//	a = 1;//不想要可以改
//	a = a + 100;
//	a += 100;//一样
//
//	a = a >> 3;
//	a >>= 3;//一样
//
//	int b = 1;
//	int c = 2;
//	int d = 3;
//	b = c = d + 1;//可以连续赋值，从右向左赋值，语法支持但是不建议这么写
//	return 0;
//	//一个=是赋值
//	//一个==是判断
//}

//单目操作符 ! - + & sizeof ~ -- ++ * (类型)
// 
// 
//!逻辑取反
//int main()
//{
//	int flang = 0;
//	printf("%d\n", !flang);
//	//flang为真打印hehe
//	//if (flang)
//	//{
//	//	printf("hehe\n");
//	//}
//	////flang为假打印haha
//	//if (!flang)
//	//{
//	//	printf("haha\n");
//	//}
//}

//-负值  +正值一般都会省略
//int main()
//{
//	int a = 10;
//	a = -a;
//	a = +a;//一般没啥用，省略
//	printf("%d", a);
//}

//sizeof计算和统计类型的长度，所占内存大小
//int main()
//{
//	//int a = 10;
//	//int arr[10] = { 0 };
//	//printf("%d\n", sizeof(arr));//数组大小
//	//printf("%d\n", sizeof(int [10]));//int [10] 是arr数组的类型 - 40
//
//	//printf("%d\n", sizeof(a));//计算a所占的空间大小，单位是字节
//	//printf("%d\n", sizeof(int));
//	//printf("%d\n", sizeof a);//sizaof计算变量名可以这样写不加()
//	////printf("%d\n", sizeof int);//sizaof 能这样写语法规定
//	////sizaof a 能这样写证明不是函数
//
//	short s = 5;
//	int a = 10;
//	printf("%d\n", sizeof(s = a + 2));//sizeof()括号的表达式是不参与运算的
//	printf("%d\n", s);
//
//	return 0;
//}

//~按位取反
//int main()
//{
//	int a = -1;
//	//10000000000000000000000000000001
//	//11111111111111111111111111111110
//	//11111111111111111111111111111111
//	//`按位取反
//	//11111111111111111111111111111111
//	//00000000000000000000000000000000
//	int b = ~a;
//	printf("%d\n", a);
//	printf("%d\n", b);
//
//	return 0;
//}


//++ --
//int main()
//{
//	int a = 10;
//	printf("%d\n", a--);//10
//	printf("%d\n", a);//9
//
//	//int b = a++;//后置++，先使用，后++   先给b使用10，然后在a++
//	//int b = ++a;//前置++，先++，后使用   先给a++，然后给b使用
//
//	//int b = a--;//后置--，先使用，后--   先给b使用10，然后在a--
//	//int b = --a;//前置--，先--，后使用   先给a--，然后给b使用
//	//printf("%d\n", a);//后++是11  先++11  后--是9   先--9
//	//printf("%d\n", b);//后++是10  先++11  后--是10  先--9
//
//	return 0;
//}

//&取地址 *间接访问
//int main()
//{
//	int a = 10;
//	printf("%p\n", & a);//取地址操作符
//	//a的类型是什么*号前的类型就是什么
//	int* pa = &a;//pa是用来存放地址的 - pa就是指针变量 - 指针变量就是用来存放地址的,这个*是告诉我们pa是指针变量
//	*pa = 20;//* - 解引用操作符 - 间接访问操作符   *pa就是通过pa里存的地址找到它所指的对象a，*pa就是a， 如果*pa = 20，其实就是把上面的a改成20
//	printf("%d\n", a);
//
//	return 0;
//}

//(类型) 强制类型转换
//int main()
//{
//	int a = (int)3.14;//不会因为自己是double报错
//
//	return 0;
//}

//关系操作符 > >= < <= != ==
//int main()
//{
//	int a = 3;
//	int b = 5;
//	//if (a != b)
//	//if (a == b)
//	//...
//	{
//
//	}
//
//	return 0;
//}
//=赋值 ==判断相等

//==
//比较2个字符串相等 不能使用 == 判断
//

//逻辑操作符&& ||
//int main()
//{
//	int a = 3;
//	int b = 0;
//	//if (a && b)//a和b为真才能进去，全部满足条件
//	if (a||b)//两个只要其中一个为真就可以，
//	{
//	printf("hehe");
//	}
//	
//	
//	
//	return 0;
//}

//练习
//int main()
//{
//	int i = 0, a = 0, b = 2, c = 3, d = 4;
//	//i = a++ && ++b && d++;// 因为i = a++是0，算完在++，所以这个代码没有作用。只会有a++起作用
//	i = a++ || ++b || d++;//之前是a = 1  对于逻辑|，左边为真右边就不用算了
//	printf("%d%d%d%d", a, b, c, d);
//
//	return 0;
//}

//三目操作符 内容1?内容2:内容3
//1成立 2计算 3不计算 2输出
//1不成立 2不计算 3计算3输出
//int main()
//{
//	int a = 3;
//	int b = 0;
//	if (a>5)
//	{
//		b = 1;
//	}
//	else
//	{
//		b = -1;
//	}
//	b = a > 5 ? 1 : -1;
//	return 0;
//}

//逗号操作符,前面的必须执行完才执行最后一个，而最后一个是表达式的结果
//int main()
//{
//	int a = 3;
//	int b = 5;
//	int c = 0;
//	//逗号表达式 - 要从左向右计算，但是整个表达式的结果是最后一个表达式结果
//	int d = (c = 5,a = c + 3,b = a - 4,c += 5 );
//	//        c=10       a=8       b=4
//	printf("%d\n", d);//c会收到前面代码影响，
//	return 0;
//}

