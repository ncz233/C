#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//野指针，指针指向的位置是不可知的（随机的，不正确的，没有明确限制）
//指针未初始化
//指针越界
//指针指向的空间释放
//int main()
//{
//	//这里的p是野指针
//	//int* p;//局部的指针变量，局部变量不初始化，默认放的是随机值
//	//*p = 20;//非法访问内存
//
//	//越界访问
//	//超过指针所在的内容范围
//	//int arr[10] = { 0 };
//	//int* p = arr;
//	//int i = 0;
//	//for ( i = 0; i <= 10; i++)//访问11个，p的最高才10，超过了arr的范围，超过了p就是野指针
//	//{
//	//	*p = i;
//	//	p++;
//	//}
//	return 0;
//}

//指针指向的空间释放
//一开始是属于自己的，然后被释放掉了，这个空间不属于你了，但是指针还是记住这个起始地址，再通过指针访问不行了，因为这个空间已经换给操作系统

//int* test()//因为出数函数的时候创建，出函数的时候销毁。销毁是还给操作系统了
//{
//	int a = 10;
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}

//怎么避免野指针。
//指针初始化。 尽量所有变量初始化
//小心越界。C语言本身是不会检查数据的越界行为的
//指针指向的空间释放及时置UNLL。当指针被释放时及时把指针变量变成空指针
//指针使用之前要检查有效性

//int main()
//{
//	//当不知道p应该初始化为什么地址的时候，直接初始化为NULL
//	//int* p = NULL;//NULL本质上是0空的意思
//	//明确知道初始化的值
//	//int a = 10;
//	//int* num = a;
//
//	//C语言本身是不会检查数据的越界行为的
//	
//	//指针使用之前要检查有效性
//	int* p = NULL;//已经时空了，不能赋值了
//	if (p != NULL)//这样写有两种结果，一种是空一种是有效的地址，很少出现问题。
//	{
//		*p = 10;
//	}
//	
//
//	return 0;
//}

//指针的运算
//指针+-整数
//指针-指针
//指针的关系运算。如比较大小 

//指针+-整数
//int main()
//{
//	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p = a;//数组首元素地址
//	int* pa = a + 9;//数组第10个地址
//	while (p<=pa)
//	{
//		printf("%d\n", *p);
//		*p++;
//	}
//	return 0;
//}

//指针-指针
//指针-指针得到的是指针之间的元素个数
//指针 - 指针的前提是两个指针指向同一块空间
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	char c[5];
//	printf("%d\n", &arr[9] - &c[0]);//不行的
//
//	//printf("%d\n", &arr[9] - &arr[0]);
//	return 0;
//}

#include<string.h>
//递归

//计数器
//int my_strlen(char* a)
//{
//	int i = 0;
//	while (*a != '\0')
//	{
//		i++;
//		*a++;
//	}
//	
//	return i;
//}

//指针的写法
int my_strlen(char* a)
{
	char* start = a;//start记住一开始的位置
	while (*a != '\0')//计算一共的元素
	{
		a++;
	}

	return a - start;
}

int main()
{

	//strlen();//求字符串长度
	int len = my_strlen("abc");
	printf("%d\n", len);
	return 0;
}
