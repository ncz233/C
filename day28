#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>

//联合体 - nuion
//联合体是一种特殊的自定义类型
// 这种类型定义的变量也包含一系列的成员，特征是这些成员公用同一块空间(所以联合也叫共用体)，
//多个成员共同和享有一块空间，可以用联合体
//union Un
//{
//	char c;//1
//	int i;//4
//};
//
//int main()
//{
//	union Un u = {10};//联合体的初始化
//	//联合体改一个会把其他的也一起改了，所以在同一时间它的成员只能用一个
//	printf("%d\n", &u);
//	printf("%d\n", &(u.c));
//	printf("%d\n", &(u.i));
//	//为什么会一样，因为他们通用一块空间重叠的空间重合了，
//	//一个联合体大小至少是最大的空间大小
//	//printf("%d\n",sizeof(u));//为什么是4
//
//	return 0;
//}

//列子
//判断当前机器的大小端

//int my_sys()
//{
//	int a = 1;
//	if (*(char*)&a == 1)
//	{
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//	//11 22 33 44 大端
//	//44 33 22 11 小端
//}

//什么时候用联合体（共用体）
// 你允许你的成员共用一块空间，而且共用空间不会影响我整体的使用和设计的，这个时候可以用它
//
//int my_sys()
//{
//	union Un
//	{
//		char c;
//		int i;
//	}u;
//	u.i = 1;
//	return u.c;
//}
//
//int main()
//{
//	int ret = my_sys();
//	if (ret = 1)
//	{
//		printf("xiao");
//	}
//	else
//	{
//		printf("da");
//	}
//
//	
//
//	return 0;
//}

//union Un
//{
//	char a[5];
//	int i;
//};//8个字节
//union Un
//{
//	short a[5];
//	int i;
//};//12
//int main()
//{
//	union Un u;
//	printf("%d\n", sizeof(u));
//	//因为联合体大小也是有内存对齐的
//	// 联合体的大小至少是最大成员的大小
//	// 当最大成员大小是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍
//	//可以这样理解：看类型谁大，最后的大小就是它的倍数。然后看各个的元素，如果大于最大类型那么它的内存是加上元素的那个类型的倍数
//	//
//	return 0;
//}

//
//项目通讯录
//另一个程序中



//动态内存管理头文件#include<stdlib.h>
//为什么存在动态内存分配
//动态内存函数
// malloc - 开辟空间
// free - 释放空间
// calloc - 开辟空间
// realloc - 调整空间
//常见的动态内存错误
//几个经典的笔试题
//柔性数组

//栈区
// 局部变量
// 函数形参
// 
//堆区
// 动态内存开辟
// malloc
// free
// calloc
// realloc
// 
//静态区(数据段)
// 全局变量
// 静态变量

//malloc&&free基本上是成对出现的
//开辟多少字节malloc，开辟成功，返回起始地址，开辟失败，返回空指针
// void* malloc (size_t size);
//int main()
//{
//	//假设开10整型空间10*sizeof(int)
//	//int arr[10];//栈区
//	//动态内存开辟的   注意开辟0字节未定义，取决于编译器
//	int* p = (int*)malloc(1000000000 * sizeof(int));//malloc本身是void空指针，所以要强制类型转换
//	if (p == NULL)
//	{
//		perror("main");//报错
//		return 0;
//	}
//	//使用
//	int i = 0;
//	for ( i = 0; i < 10; i++)
//	{
//		*(p + i) = i;
//	}
//	for ( i = 0; i < 10; i++)
//	{
//		printf("%d ", p[i]);//p[i] == *(p+1)
//	}
//
//	// free只能释放动态内存
//	//void free(void* ptr);
//	//回收空间(释放)free
//	free(p);//是回收空间的，指针回收不了，回收了指针变成野指针，用了就错误
//	p = NULL;//所以释放完要转为空指针
//
//return 0;
//}

//int main()
//{
//	int a = 0;
//	int* p = &a;
//	free(p);//err,释放栈区是未定义的行为，是错误的
//	free(NULL);//是空对象，什么事都不干
//
//	return 0;
//}

//calloc开辟一块连续空间 - 会初始化内存为0
// void* malloc (size_t num, size_t size);
//和malloc差不读多，就是一个只能开辟一种固定的字节和无初始化，一种所有字节都可以开辟和有初始化，初始化为0

//int main()
//{
//	//int* p = (int*)malloc(40);//无初始化
//	int* p = calloc(10, sizeof(int));//有初始化为0
//	if (p == NULL)
//	{
//		return 0;
//	}
//	int i = 0;
//	for ( i = 0; i < 10; i++)
//	{
//		printf("%d\n", *(p + i));
//	}
//	return 0;
//}

//realloc - 给指针增加空间大小 - 三种情况
// 1.后面空间够用，返回旧的地址
// 2.后面空间不够用，它会在内存中重新找一块空间，拷贝下来，释放掉旧空间，返回新的地址
// 3.后面空间不够用，它会在内存中重新找一块空间,发现还是不够，就无法实现空间增加，会返回空指针，说明指针找不到旧地址了
//推荐拿临时指针接收
//void* realloc (void* ptr, size_t size);
//int main()
//{
//	int* p = calloc(10, sizeof(int));
//	if (p == NULL)
//	{
//		perror("main");
//		return 0;
//	}
//	//使用
//	int i = 0;
//	for ( i = 0; i < 10; i++)
//	{
//		*(p + i) = 5;
//	}
//	//如果还需p指向的空间更大，需要20geint空间
//	//realloc调整空间
//	//但是因为3种情况存在所以要怎么写，有可能返回旧的地址||新的地址||空地址
//	int* ptr = realloc(p, 20 * sizeof(int));
//	if (ptr != NULL)
//	{
//		p = ptr;
//	}
//	free(p);
//	p = NULL;
//	return 0;
//}

int main()
{
	int* p = (int*)realloc(NULL, 40);//这里功能类似于malloc，就是直接在堆区开辟40个字节

	return 0;
}

//学完动态内存管理，就可以改造通讯录成动态增长的版本了！
