#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>

//~按位取反 会把原数字变成补码 然后把所有数字1变0，0变1 在内存中以补码出现
//可以看成相反数
//int main()
//{
//	int a = 0;
//	printf("%d\n", ~a);//按(二进制位)位取反，把所有二进制中数字，1变0，0变1.包括符号位
//	//为什么是-1
//	//整数在内存中存储是补码 正整数源码，反码，补码相同，负整数是源码，反码，补码不相同。
//	// 一个整数二进制有3种表示：源码，反码，补码
//	// 比如-1数字，整数二进制的最高位表示符号位!，所以1是-符号0是+符号,变成其他码时候最高位不会变
//	// 10000000000000000000000000000001（源码）
//	// 11111111111111111111111111111110（反码）除了最高位符号位不会变，其他所有的反过来 1变0，0变1.
//	// 11111111111111111111111111111111（补码）在反码二进制上加1
//	//
//	//过程：0是00000000000000000000000000000000 源码，反码，补码都一样 还是0
//	//经过~变成11111111111111111111111111111111 最前面有1了所以是负数
//	//然后计算机内存中存储是补码
//	//因为是负数要变成反码-1，反码变成源码 除了最高位符号位不会变其他所有的反过来 1变0，0变1.
//	// 
//	return 0;
//}

//++前置，后置++  
//前置++  先++  后使用，后置++  先使用  后++  ,理解这样就行了！
//int main()
//{
//	//int a = 10;
//	//int b = ++a;//先++a，后使用a
//
//	//printf("%d\n", a);
//	//printf("%d\n", b);
//
//	int a = 10;
//	int b = a++;//先使用a，后++a
//
//	printf("%d\n", a);
//	printf("%d\n", b);
//
//	return 0;
//}

//*符号以后会跟&一起讲

//(类型)强制类型转换
//int main()
//{
//	//强制类型转换,不推荐用，但是这种语法是存在的
//	int a = (int)3.14;
//	printf("%d\n", a);
//
//	return 0;
//}

//关系操作符：>大于,>=大于等于,<小于,<=小于等于,!=不等于,==等于

//逻辑操作符：&&意思是并且,||意思是或

//int main()
//{
//	////0是假是0，非0是真是1
//	//int a = 3;
//	//int b = 5;
//	//int c = a && b;
//	////a和b非0是真，所以是1
//	//printf("%d\n", c);
//
//	int a = 3;
//	int b = 0;
//	int c = a || b;
//	//a或b非0是真，所以是1，a或b是0是假，所以是0
//	printf("%d\n", c);
//	/*if (a&&b)
//	{
//
//	}*/
//
//	return 0;
//}

//条件操作符(三木操作符)
//内容1?内容2:内容3  如果 内容1成立，内容2计算，整个表达式的结构是: 内容2的结果
//内容1?内容2:内容3  如果 内容1不成立，内容3计算，整个表达式的结构是: 内容3的结果
//
//int main()
//{
//	int a = 0;
//	int b = 3;
//	int max = 0;
//	max = a > b ? a : b;
//	/*if (a>b)
//	{
//		max = a;
//	}
//	else
//	{
//		max = b;
//	}*/
//	printf("%d\n",max);
//
//	return 0;
//}

//逗号表达式：内容,内容,内容....
//逗号隔开的一串表达式。
//int main()
//{
//	//(2, 3 + 5, 6);
//	int a = 0;
//	int b = 3;
//	int c = 5;
//	//       a=5        c=1        b=3
//	int d = (a = b + 2, c = a - 4, b = c + 2);
//    //从左到右依次计算
//	//整个表达式的结果是最后一个表达式的结果
//	printf("%d\n", d);
//	return 0;
//}

//[]下标引用、()函数调用、结构成员 ., ->

//[]下标引用
//int main()
//{
//	//[]下标引用
//	//int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	//printf("%d\n", arr[5]);//[]是下标引用操作符 下标是5的数拿出来，就是6
//
//	
//
//	return 0;
//}

//()函数调用
int main()
{
	//()函数调用
	//调用函数的时候，函数名后边的()就是函数操作符
	printf("hello\n");//printf是函数名,()是函数操作符  传一个可以("hello\n")
	printf("%d\n", 100);//传两个可以("%d\n",100)   传多个也可以 ，一个不传也行
}

// &   *  .  -> 先放放

//C语言常见关键字==================
// auto是自动的 - 每个局部变量都是auto修饰的， break在循环和switch语句里 case在switch case语句， const修饰常变量， continue继续， default默认用switch case语句里，
// do用在do...while循环， else 什么语句， enum枚举类型， extern声明外部符号的， for循环语句， goto语句， if语句， register寄存器关键字
//1.C语言提供的，不能自己创建关键字
//2.变量名不能是关键字

//int main()
//{
//	int char = 0;不能
//	{//从这里进来自动创建
//		//auto是自动的 - 每个局部变量都是auto修饰的
//		int a = 10;//自动创建，自动销毁的 - 自动变量
//		//局部变量前面都有auto，因为都是auto所以省略掉了
//		//auto 新的C语言语法中也有其他用法 - 暂时不考虑
//	}//从这里进来自动销毁
//
//
//	return 0;
//}

//register语句
int main()
{
	register int num = 100;//建议num的值放在寄存器中，让编译器做决定放不放
	//计算机数据存的地方：内存8-16G，高速缓存几十MB，硬盘500G，寄存器更小
	return 0;
}
