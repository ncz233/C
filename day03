#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>

//~按位取反 会把原数字变成补码 然后把所有数字1变0，0变1 在内存中以补码出现
//可以看成相反数
//int main()
//{
//	int a = 0;
//	printf("%d\n", ~a);//按(二进制位)位取反，把所有二进制中数字，1变0，0变1.包括符号位
//	//为什么是-1
//	//整数在内存中存储是补码 正整数源码，反码，补码相同，负整数是源码，反码，补码不相同。
//	// 一个整数二进制有3种表示：源码，反码，补码
//	// 比如-1数字，整数二进制的最高位表示符号位!，所以1是-符号0是+符号,变成其他码时候最高位不会变
//	// 10000000000000000000000000000001（源码）
//	// 11111111111111111111111111111110（反码）除了最高位符号位不会变，其他所有的反过来 1变0，0变1.
//	// 11111111111111111111111111111111（补码）在反码二进制上加1
//	//
//	//过程：0是00000000000000000000000000000000 源码，反码，补码都一样 还是0
//	//经过~变成11111111111111111111111111111111 最前面有1了所以是负数
//	//然后计算机内存中存储是补码
//	//因为是负数要变成反码-1，反码变成源码 除了最高位符号位不会变其他所有的反过来 1变0，0变1.
//	// 
//	return 0;
//}

//++前置，后置++  
//前置++  先++  后使用，后置++  先使用  后++  ,理解这样就行了！
//int main()
//{
//	//int a = 10;
//	//int b = ++a;//先++a，后使用a
//
//	//printf("%d\n", a);
//	//printf("%d\n", b);
//
//	int a = 10;
//	int b = a++;//先使用a，后++a
//
//	printf("%d\n", a);
//	printf("%d\n", b);
//
//	return 0;
//}

//*符号以后会跟&一起讲

//(类型)强制类型转换
//int main()
//{
//	//强制类型转换,不推荐用，但是这种语法是存在的
//	int a = (int)3.14;
//	printf("%d\n", a);
//
//	return 0;
//}

//关系操作符：>大于,>=大于等于,<小于,<=小于等于,!=不等于,==等于

//逻辑操作符：&&意思是并且,||意思是或

//int main()
//{
//	////0是假是0，非0是真是1
//	//int a = 3;
//	//int b = 5;
//	//int c = a && b;
//	////a和b非0是真，所以是1
//	//printf("%d\n", c);
//
//	int a = 3;
//	int b = 0;
//	int c = a || b;
//	//a或b非0是真，所以是1，a或b是0是假，所以是0
//	printf("%d\n", c);
//	/*if (a&&b)
//	{
//
//	}*/
//
//	return 0;
//}

//条件操作符(三木操作符)
//内容1?内容2:内容3  如果 内容1成立，内容2计算，整个表达式的结构是: 内容2的结果
//内容1?内容2:内容3  如果 内容1不成立，内容3计算，整个表达式的结构是: 内容3的结果
//
//int main()
//{
//	int a = 0;
//	int b = 3;
//	int max = 0;
//	max = a > b ? a : b;
//	/*if (a>b)
//	{
//		max = a;
//	}
//	else
//	{
//		max = b;
//	}*/
//	printf("%d\n",max);
//
//	return 0;
//}

//逗号表达式：内容,内容,内容....
//逗号隔开的一串表达式。
//int main()
//{
//	//(2, 3 + 5, 6);
//	int a = 0;
//	int b = 3;
//	int c = 5;
//	//       a=5        c=1        b=3
//	int d = (a = b + 2, c = a - 4, b = c + 2);
//    //从左到右依次计算
//	//整个表达式的结果是最后一个表达式的结果
//	printf("%d\n", d);
//	return 0;
//}

//[]下标引用、()函数调用、结构成员 ., ->

//[]下标引用
//int main()
//{
//	//[]下标引用
//	//int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	//printf("%d\n", arr[5]);//[]是下标引用操作符 下标是5的数拿出来，就是6
//
//	
//
//	return 0;
//}

//()函数调用
//int main()
//{
//	//()函数调用
//	//调用函数的时候，函数名后边的()就是函数操作符
//	printf("hello\n");//printf是函数名,()是函数操作符  传一个可以("hello\n")
//	printf("%d\n", 100);//传两个可以("%d\n",100)   传多个也可以 ，一个不传也行
//}

// &   *  .  -> 先放放

//C语言常见关键字==================
// auto是自动的 - 每个局部变量都是auto修饰的， break在循环和switch语句里 case在switch case语句， const修饰常变量， continue继续， default默认用switch case语句里，
// do用在do...while循环， else 什么语句， enum枚举类型， extern声明外部符号的， for循环语句， goto语句， if语句， register寄存器关键字， return返回值要跟前面的数据类型呼应起来
// signed有符号的 10 -20， unsigned无符号的 没符号位概念的，sizeof求大小， static静态的， struct结构体， switch语句， typedef类型定义， union联合体(共用体)
// void无或空， volatileC语言段位， while循环语句
// define - 不是关键字 - 预处理指令   include - 不是关键字 - 预处理指令
//1.C语言提供的，不能自己创建关键字
//2.变量名不能是关键字

//int main()
//{
//	int char = 0;不能
//	{//从这里进来自动创建
//		//auto是自动的 - 每个局部变量都是auto修饰的
//		int a = 10;//自动创建，自动销毁的 - 自动变量
//		//局部变量前面都有auto，因为都是auto所以省略掉了
//		//auto 新的C语言语法中也有其他用法 - 暂时不考虑
//	}//从这里进来自动销毁
//
//
//	return 0;
//}

//register语句
//int main()
//{
//	//大量/频繁被使用的数据，想放在寄存器中，提升效率
//	//编译器是非常聪明的register意义也不大
//	register int num = 100;//建议num的值放在寄存器中，让编译器做决定放不放
//	//计算机数据存的地方：内存8-16G，高速缓存几十MB，硬盘500G，寄存器更小
//
//	return 0;
//}

//关键字typedef 类型定义：类型重定义
//张三 - 小三 复杂东西简单化
//typedef unsigned int u_int;//类型重定义
//int main()
//{
//	unsigned int num = 100;
//	u_int num2 = 100;//与unsigned int 一样
//	return 0;
//}

//static - 静态的，希望这个变量出了范围不销毁，还要继续使用它的值用static修饰
//1.static修饰局部变量:改变了局部变量的生命周期(本质上改变了变量的存储类型)
//2.static修饰全局变量:使得这个全局变量只能在自己所在的源文件(.c)内部使用其他源文件不可使用
// 全局变量可以被其他源文件使用，是因为具有外部链接属性，但是被static修饰后变成内部链接属性，其他源文件连接不到了
//3.static修饰函数:和static修饰全局变量一样
//内存划分区域
// 栈区：  局部变量，函数参数，只要是局部临时发生的变量都会存
// 堆区：  动态内存分配(后面会讲)
// 静态区：全局变量，static修饰的静态变量
//
//void t()
//{
//	static int b = 1;//出去没有被销毁所以第二次是2开始
//	b++;
//	printf("%d\n", b);
//}
//
//int main()
//{
//	int a = 0;
//	while (a<10)
//	{
//		t();
//		a++;
//	}
//	return 0;
//}

//extern声明
//extern int x;
//int main()
//{
//	printf("%d\n", x);
//	return 0;
//}

//声明函数
//extern int add(int, int);
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = add(a,b);
//	printf("sum = %d\n", sum);
//	return 0;
//}

//define定义常量和宏
//define是一个预处理指令
//1.define定义符号

//#define max 200
//int main()
//{
//	printf("%d\n", max);
//
//	return 0;
//}

//2.define定义宏
//宏就是替换，别太深入
//#define add(x,y) ((x)+(y))//加了括号变成整体，不会有11了
//int main()
//{
//	printf("%d\n", 4*add(2, 3));
//	//             4*2+3
//	return 0;
//}

//指针：内存是怎么编号的 一个字节给一个编号 然后分配地址， 一个内存单元是多大 是1字节。
//内存编号 - 电脑32位 - 32跟地址线 - 物理线 - 通电 - 1/0  有32跟地址线每个是0或1
//变成二进制序列：00000000000000000000000000000000 - 11111111111111111111111111111111  2的32次方都可以作为内存的编号，也就是内存单元的地址
//2的32次方是4294967296bit比特  除8是536870912byte字节  除1024是524288kb千  除1024是512mb照 除1024是0.5gb吉
//因为C语言最低内存是1字节，所以一个内存单元是字节，一个字节给一个编号，然后分配地址。
//指针变量是存放别人地址 如：int* p(*指针p指针名字) = &a(&是地址a是别人)，可以间接改变 如：*p = 20，指针有类型是指向对象的类型。

//int main()
//{
//	int a = 10;//a在内存中要分配空间 - 4个字节
//	printf("%p\n", &a);//%p是专门打印地址的
//	int * pa = &a;//pa是用来存放地址，在C语言中pa叫指针变量
//	//*说明 pa是指针变量  pa是指针的名字可以改变
//	//int 说明pa指向的对象是int类型的
//
//	char ch = 'w';
//	char* pc = &ch;
//
//	return 0;
//}

//int main()
//{
//	int* pa = &pa;//可以玩
//	return 0;
//}

//int main()
//{
//
//	int a = 10;
//	int* pa = &a;//在pa里存了a
//	*pa = 20;//*解引用操作，*pa就是通过pa里边的地址，找到a
//	//这个是*pa通过pa里边的地址，找到a改变，但这是间接的改变。
//	printf("%d\n",a);
//
//	return 0;
//}

//int main()
//{
//	//指针的大小是相同的
//	//指针是存放地址的
//	//我们编译器是32的平台，32位平台编译出32位程序里面的指针大小不管什么类型的地址都是4字节
//	//64位机器就是8字节
//	//可以理解成指针的大小跟地址线有关，而地址线跟32位或64位平台有关。
//	printf("%d\n", sizeof(char*));
//	printf("%d\n", sizeof(short*));
//	printf("%d\n", sizeof(int*));
//	printf("%d\n", sizeof(long*));
//	printf("%d\n", sizeof(long long*));
//	printf("%d\n", sizeof(float*));
//	printf("%d\n", sizeof(double*));
//	//32位机器上，一个地址是32bit - 4字节
//	//64位机器上，一个地址是64bit - 8字节
//	return 0;
//}

//struct结构体 描述复杂对象:可以让C语言创建新的类型出来

//创建一个学生
struct stu
{
	char name[20];//成员变量
	int age;
	double chengji;
};

//书
struct book
{
	char name[20];
	float dingjia;
	char id[30];
};

int main()
{
	struct stu s = { "张三",20,85.5};//结构体的创建和初始化
	printf("1:%s %d %lf\n", s.name, s.age, s.chengji);//结构集变量.成员变量名
	struct stu* p = &s;
	printf("2:%s %d %lf\n", (*p).name, (*p).age, (*p).chengji);

	printf("3:%s %d %lf\n", p->name, p->age, p->chengji);//结构体指针->成员变量名
	return 0;
}
