#pragma once
#include<stdio.h>
#include<stdlib.h>
#include<time.h>

#define row 9
#define col 9
#define ROW row+2
#define COL col+2
#define easy 10

//初始化
void initboard(char a [ROW][COL],int rows,int cols,char set);

//打印
void displayboard(char a[ROW][COL], int rows, int cols);

//设置雷
void setmine(char a[ROW][COL], int rows, int cols);

//排雷
void findmine(char a[ROW][COL], char b[ROW][COL], int rows, int cols);

=============================================================================================================

#define _CRT_SECURE_NO_WARNINGS 1
#include "game2.h"

void initboard(char a[ROW][COL], int rows, int cols, char set)
{
	int i = 0;
	int j = 0;
	for ( i = 0; i < rows; i++)
	{
		for ( j = 0; j < cols; j++)
		{
			a[i][j] = set;
		}
	}
}

void displayboard(char a[ROW][COL], int rows, int cols)
{
	int i = 0;
	int j = 0;
	printf("===========================\n");
	//打印列号
	for ( i = 0; i <= cols; i++)
	{
		printf("%d ", i);
	}
	printf("\n");
	for (i = 1; i <= rows; i++)
	{
		printf("%d ", i);//打印行号
		for (j = 1; j <= cols; j++)
		{
			printf("%c ", a[i][j]);
		}
		printf("\n");
	}
	printf("==============================\n");
}

void setmine(char a[ROW][COL], int rows, int cols)
{
	//布置10雷
	int lei = 10;
	while (lei)
	{
		//生成随机下标
		int x = rand() % rows + 1;
		int y = rand() % cols + 1;
		if (a[x][y] == '0')
		{
			a[x][y] = '1';
			lei--;
		}
	}
}

//static
//1.修饰局部变量
// 2.修饰全局变量
// 3.修饰函数
//
static int get_mine_count(char a[ROW][COL], int x, int y)
{
	return a[x - 1][y] +
		a[x - 1][y - 1] +
		a[x][y - 1] +
		a[x + 1][y - 1] +
		a[x + 1][y + 1] +
		a[x + 1][y] +
		a[x - 1][y + 1] +
		a[x][y + 1] - 8 * '0';
}

void findmine(char a[ROW][COL], char b[ROW][COL], int rows, int cols)
{
	//1.输入排查目标
	// 2.是否雷
	// 雷炸死
	// 不是雷统计坐标周围
	//

	int x = 0;
	int y = 0;
	int z = 0;
	printf("请输入排查目标\n");
	scanf("%d%d", &x, &y);// x 1-9 , y 1-9

	//判断合法性
	while (z<rows*rows - easy)
	{
		printf("请输入排查目标\n");
		scanf("%d%d", &x, &y);// x 1-9 , y 1-9

		if (x >= 1 && x <= rows && y >= 1 && y <= cols)
		{
			if (a [x][y] == '1')
			{
				printf("很遗憾炸死了\n");
				displayboard(a, row, col);
				break;
			}
			else
			{
				//不是雷，统计x，y周围有多少雷。
				int count = get_mine_count(a, x, y);
				a[x][y] = count+'0';
				//显示排查信息
				displayboard(b, rows, cols);
				z++;
			}
		}
		else
		{
			printf("坐标核发\n");
		}
	}

	if (z == rows*cols - easy)
	{
		printf("恭喜你\n");
		displayboard(b, row, col);
	}


}

 =====================================================================================

#define _CRT_SECURE_NO_WARNINGS 1
#include"game2.h"

void caidan()
{
	printf("#######################\n");
	printf("#######1.paly #########\n");
	printf("#######0.exit #########\n");
	printf("#######################\n");
}

void game()
{
	char a[ROW][COL] = {0};//雷的信息
	char b[ROW][COL] = {0};//存放排查雷信息
	//初始化棋盘
	initboard(a, ROW, COL,'0');
	initboard(b, ROW, COL,'*');

	//打印棋盘
	//displayboard(a, row, col);
	displayboard(b, row, col);

	//布制雷
	setmine(a, row, col);
	displayboard(a, row, col);

	//排查雷
	findmine(a, b, row, col);
}

int main()
{
	int a = 0;
	srand((unsigned int)time(NULL));
	do
	{
		caidan();
		printf("请输入\n");
		scanf("%d", &a);
		switch (a)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("请重新输入\n");
			break;
		}

	} while (a);
	return 0;
}

