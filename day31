#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<Windows.h>

//对比一组函数
//scanf/fscanf/sscanf
// sscanf
//  int sscanf ( const char * s, const char * format, ...);把字符串里的数据提取到一个格式化的数据
//   读出格式化的数据，剩下和scanf一样
// 
//printf/fprintf/sprintf
// sprintf
//  int sprintf ( char * str, const char * format, ... ); 把一个格式化数据写到一个字符串里
//   指向字符串的指针，剩下的和printf一样
//  
//
//scanf:针对标准输入的格式化的输入语句 - stdin
//fscanf：针对所有输入流的格式化的输入语句
//sscanf：从一个字符串中读取一个格式化的数据 
//
//printf：针对标准输出的格式化的输入语句 - stdout
//fprintf：针对所有输出流的格式化的输入语句
//sprintf：把一个格式化的数据，转换成字符串
//

//struct S
//{
//	char ch[20];
//	int i;
//	float f;
//};
//int main()
//{
//	struct S s = { "abcd",10,5.5f };
//	struct S tmp = { 0 };
//
//	char buf[100] = { 0 };
//	//sprintf 把一个格式化的数据，转换成字符串
//	sprintf(buf, "%s %d %f", s.ch, s.i, s.f);
//	printf("%s\n", buf);
//	//从buf字符串中中还原结构体数据
//
//	//sscanf 从一个字符串中读取一个格式化的数据
//	sscanf(buf, "%s %d %f", tmp.ch, &(tmp.i), &(tmp.f));
//	printf("%s %d %f", tmp.ch, tmp.i, tmp.f);//以字符串形式打印
//
//	return 0;
//}

//文件的随机读写 - fseek
// fseek - 根据文件指针的位置和偏移量来定位文件指针
//  int fseek ( FILE * stream, long int offset, int origin );
//   指向的流，偏移量，起始位置
// 起始位置
// SEEK_SET	文件开始
// SEEK_CUR	文件指尖的当前位置
// SEEK_END	文件结束 的位置
// 
////ftell - 返回文件指针相对于的起始位置的偏移量
// long int ftell ( FILE * stream );
//  指向的流
//rewind - 返回文件的起始位置
// void rewind ( FILE * stream );
//  指向的流
//
//int main()
//{
//	FILE* pf = fopen("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\test.txt", "r");
//	if (pf == NULL)
//	{
//		perror("fopen");
//		return 1;
//	}
//	//读取
//	int ch = fgetc(pf);
//	printf("%c\n", ch);//a
//	//文件指针
//	fseek(pf, -2, SEEK_END);
//	ch = fgetc(pf);
//	printf("%c\n", ch);//
//	ch = fgetc(pf);
//	printf("%c\n", ch);//
//	int ret = ftell(pf);
//	printf("%d\n", ret);
//
//	rewind(pf);
//	ch = fgetc(pf);
//	printf("%c\n", ch);
//
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

//文本文件和二进制文件
// 数据在内存中以二进制的形式存储的(字符是ascll值)
//
//int main()
//{
//
//	int a = 10000;
//	FILE* pf = fopen("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\test.txt", "wb");
//	if (pf == NULL)
//	{
//		perror("fopen");
//		return 1;
//	}
//	//写文件
//	fwrite(&a, sizeof(int), 1, pf);
//
//	fclose(pf);
//	pf = NULL;
//
//	return 0;
//}

//文件读取结束的判定
//被错误使用的feof
//在读取文件过程中，不能使用feof函数的返回值直接用来判断文件的是否结束。
// 本质是，当文件读取结束的时候，判断是读取失败结束，还是遇到文件尾结束
//fgetc函数在读取结束的时候，会返回EOF
// 正常读取的时候，返回的是读取到的字符的ascll值
//fgets函数在读取结束的时候，会返回null
// 正常读取的时候，返回存放字符串的空间起始地址
//fread函数在读取的时候，返回的是实际读取到的完整元素的个数
// 如果发现读取到的完整的元素的个数小于，指定的元素个数，这就是最后一次读取了。
//

//拷贝一份test.txt拷贝一份，生成test2.txt
//
//int main()
//{
//	FILE* pfread = fopen("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\test.txt", "r");
//	if (pfread == NULL)
//	{
//		perror("pfread");
//		return 1;
//	}
//	FILE* pfwrite = fopen("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\test2.txt", "w");
//	if (pfwrite == NULL)
//	{
//		fclose(pfread);
//		pfread = NULL;
//		return 1;
//	}
//	//文件打开成功
//	//文件拷贝
//	int ch = 0;
//	while (ch = fgetc(pfread) != EOF)
//	{
//		//写文件
//		fputc(ch, pfwrite);
//	}
//	if (feof(pfread))
//	{
//		printf("遇到文件结束标志，文件正常结束\n");
//	}
//	else if (ferror(pfread))
//	{
//		printf("文件读取失败结束\n");
//	}
//
//	fclose(pfread);
//	pfread = NULL;
//	fclose(pfwrite);
//	pfwrite = NULL;
//
//	return 0;
//}

//文件缓冲区
//程序文件和硬盘之间有文件缓冲区，一个是输入缓冲区一个是输入缓冲区
//
//int main()
//{
//	FILE* pf = fopen("C:\\我的文件夹\\云备份\\OneDrive\\桌面\\学习\\新建文件夹\\test.txt", "w");
//	fputs("abcde", pf);
//	printf("睡十秒\n");
//	Sleep(10000);
//	printf("刷新缓冲区\n");
//	fflush(pf);//刷新，会把缓冲区写到文件里
//	printf("在睡十秒\n");
//	Sleep(10000);
//	fclose(pf);
//	pf = NULL;
//
//	return 0;
//}
//文件结束


//程序环境和预处理
//程序的翻译环境
//程序的执行环境
//详解：C语言程序的编译+连接
//预定义符号介绍
//预处理指令#define
//宏和函数的对比
//预处理操作符#和##的介绍
//命令定义
//预处理指令#include
//预处理指令#undef
//条件编译

//程序的翻译环境和执行环境(liunx环境)
// 在任何一个标准c的程序中，都存在两个不同的环境
// 1种是翻译环境，在这个环境中源代码被转换为可执行的机器指令
// 2种叫执行环境，它用于实际执行代码
// 从.c - .exe 的过程是翻译环境vs扮演的就是这翻译环境
// 
// 每个.c文件单独进入编译器出来的时候后缀名会变成.obj
// 这么多个.obj文件一起进入到连接器，连接器还会把一些链接库连接进去
// 最后生成连接器会把目标文件(.obj||.out)以及链接库连接在一起生成可执行程序
// 编译环境：编译(编译器) - 每个源文件经过编译器处理会生成目标文件(.obj)、连接(连接器)
//  编译中有3：预编译(预处理)、编译、汇编
//   预编译(完成的都是文本操作，后缀名是.i)：1.完成了头文件的包含(#include) 2.define定义的符号和宏的替换 3.注释删除 
//   编译(把C语言代码转化成汇编代码，后缀名是.s)：语法分析，词法分析，语义分析，符号分析
//   汇编(把汇编代码转换成二进制指令，后缀名是.o)：符号汇总、生成符号表。文件的格式是elf格式  （我们看不懂） - readelf工具能看得懂
//    合并段表、符号表的合并和重定位
//     合并段表：elf格式文件是由几个段组成的，我们要把多个elf格式合并生一个可执行程序(可执行程序也是elf格式的)，连接的时候要把相同段的数据合并在一起
//     符号表的合并和重定位：连接期间来自多个.o文件的符号表也是要合并的，合并的时候会出问题如果两个人都有同一个数将会选择一个确切的地址，最终生成的符号表会没有重复的，重复的会比较留下哪一个有意义的
//  最后把多个目标文件和链接库进行连接的生成可执行程序(也是elf格式的)

//收集符号add和main，不会收集局部变量，汇总全局的
//int add(int a, int b)
//{
//	return a + b;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int ret = add(a, b);
//
//	return 0;
//}

//运行环境
//程序必须载入到内存中。
//程序开始执行，接着找到main函数开始执行
//开始执行程序代码。这个时候程序将使用堆栈、堆区、静态区。
// 栈区：先给main函数开辟空间，大小给编译器决定，其次函数运行时会给函数开辟空间(函数和函数之间会有空间，空间存的是形参)，当函数调用完后的空间会还给操作系统
//  《程序员的自我修养》、《函数栈帧》、(小知识，堆栈就是栈区)
//终止程序，可能正常，可能异常(如断电)
//
