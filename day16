#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>
#include<string.h>
#include<assert.h>

//模拟实现一个strcpy
// 
//void my_strcpy(char* de, char* src)
//{
//	while (*src != '\0')
//	{
//		*de++ = *src++;//hello拷贝
//	}
//	*de = *src;//\0拷贝
//}

//把src放入指向的内容拷贝放进dest指向的空间中
//从本质上讲，希望de指向的内容被修改，src指向的内容不应该被修改
// 
//strcpy 这个函数 其实返回的是目标空间的起始地址
//char* my_strcpy(char* de, const char* src)//const,如果代码写反了代码跑步过去,很好的保护，不会影响正常的情况
//{
//	assert(src != NULL);//断言，为假报错，防止有人输入错误提醒他.为真不报错。以执行代码报错试有用
//	assert(de != NULL);
//	char* ret = de;//它记录了de的变化，因为是指针所以知道de的变化，
//	while (*de++ = *src++)//先算里面的*de = *src也就是*de = \0，先得出*de = \0，在判断while循环语句
//	{
//		;//hello拷贝
//	}
//	return ret;
//}
//
//int main()
//{
//	//int a = 3;
//	//int b = 5;
//	//int c = a = b + 3;//这个就等于while (*de++ = *src++)。先算里面的在去外面做判断，里面的变量发生改变
//	char arr1[20] = "xxxxxxxxxxxxxx";
//	char arr2[] = "hello";//会把后面的\0拷贝过去
//	//1.目标空间的起始地址，2.原空间的起始地址
//	printf("%s\n", my_strcpy(arr1, arr2));//链式访问，有返回值可以放进链式访问中
//	return 0;
//}

//int main()
//{
//	//int num = 10;
//	//int* p = &num;
//	//*p = 20;
//	//printf("%d\n", num);
//
//	//const 修饰变量，这个变量就被称为常变量，不能被修改，但本质上还是变量
//	//const int num = 10;
//	////num = 30;//错误
//	//int n = 100;
//	////但是const对指针无效，因为const是直接不给改，但是地址交给p p可以改
//	//int const* p = &num;//const如果放在*左边，修饰的是*p，表是的是指针指向的内容，是不能通过指针来改变的
//	////*p = 20;//但是给指针p加个const就可以了不能被修改了
//	//p = &n;//但是指针变量本身是可以修改的
//	//printf("%d\n", *p);
//
//	//*p是指向对象的值，p指针变量自己的值。如果p改变，那*p也会跟着改变,*p改变 p不会改变。
//	//const修饰*p那*p是不能改变的，但是p可以  const int* p
//	//const修饰p那p是不能改变的，但是*p可以 int* const p
//	//如果const修饰*p和p，都不可以改变 int const* const p
//	//二级指针 int const* const* const p
//
//	const int num = 10;
//	int n = 100;
//	const int*  p = &num;//const如果放在*右边，拿修饰的是p，表是的是指针变量不能被改变，但是指针指向的内容可以被改变
//	//*p = 20;
//	p = &n;
//	printf("%d\n", n);
//	return 0;
//}

//strlen 求字符串长度
//my_strlen
// 1.const
// 2.assert
//

//int 是有符号整型，有可能是负数，但是求字符串长度没有负数，要严谨
// size_t - unsigned int - 无符号整型

//size_t my_strlensn(const char* de)
//{
//	//assert(de != NULL);//*p是指针指向的对象 p是指针。这个意思是指针不能是空指针，是指针不是指针指向的对象
//	assert(de);//也可以这样写，指针是空指针为0，为0是假报错，指针不是空指针为真。
//	size_t num = 0;
//	while (*de++ != '\0')
//	{
//		num++;
//	}
//	return num;
//}
//int main()
//{
//	char str[] = "holle word";
//	printf( "%d", my_strlensn(str));
//
//	return 0;
//}

//_cdecl函数调用约定，细节

//编译型错误，看错误信息改，好找，相对简单
//运行时错误，借助调试，逐步定位，最难搞

//初阶结束，算入门吧


//练习

//int main()
//{
//	int a, b, c;
//	a = 5;
//	c = ++a;
//	b = ++c, c++, ++a, a++;
//	b += a++ + c;
//	printf("%d\n%d\n%d\n", a, b, c);
//	return 0;
//}

//二进制中n的1有多少
//10%2 = 0
//10/2 = 5
//5%2 = 1
//5/2 = 2
//2%2 = 0
//2/2=1
//1%2=1
//1/2=0
//
//int numabc(int n)//可以size_t,但是不行
//{
//	int a = 0;
//	while (n)
//	{
//		if (n%2 == 1)//负数不灵了
//		{
//			a++;
//		}
//		n /= 2;
//	}
//	return a;
//}
//int numabc(int n)//可以size_t,但是不行
//{
//	int a = 0;
//	//int i = 0;
//	//for ( i = 0; i < 32; i++)
//	//{
//	//	if (((n>>i)&1) == 1)
//	//	{
//	//		a++;
//	//	}
//	//}
//
//	//n=n&(n-1)
////n = 10
//// 01010 n
//// 01001 n-1
//// 01000 n
//// 00111 n-1
//// 00000
////
//	while (n)
//	{
//		n = n & (n - 1);
//		a++;
//	}
//	return a;
//}
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	printf("%d\n", numabc(n));
//	return 0;
//}

//写个代码判断一个数字是不是2的n次方
// 2的n次方的数字，其中只有一个
// k&（k-1） == 0
//k = 10
// 1010 k
// 1001 k-1
// 1000 k
// 0111 k-1

//两个数的不同位有多少个
//int numabc(int n)//可以size_t,但是不行
//{
//	int a = 0;
//
////n=n&(n-1)
////n = 10
//// 01010 n
//// 01001 n-1
//// 01000 n
//// 00111 n-1
//// 00000
////
//	while (n)
//	{
//		n = n & (n - 1);
//		a++;
//	}
//	return a;
//}
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	int i = 0;
//	scanf("%d %d", &a, &b);
//	int ret = a ^ b;
//	//for ( i = 0; i < 32; i++)
//	//{
//	//	if (((a >> i)& 1) != ((b >> i)& 1))
//	//	{
//	//		c++;
//	//	}
//	//}
//	printf("%d", numabc(ret));
//	return 0;
//}

//打印二进制中的基数位和偶数位
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int i = 0;
//	for  (i = 31; i >= 1; i-=2)
//	{
//		printf("%d", (n >> i) & 1);
//	}
//	printf("\n");
//	for ( i = 30; i >= 0; i-=2)
//	{
//		printf("%d", (n >> i) & 1);
//	}
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	int b = 20;
//	a = a ^ b;
//	b = a ^ b;
//	a = a ^ b;
//	printf("%d %d", a, b);
//
//	return 0;
//}

int main()
{
	int arr[] = { 1,2,3,4,5 };
	short* p = (short*)arr;//短整型是2字节，移动4位一共移动8个字节，1个整型是4个字节，所以移动2个整型的长度
	int i = 0;
	for ( i = 0; i < 4; i++)
	{
		*(p + i) = 0;
	}
	for ( i = 0; i < 5; i++)
	{
		printf("%d\n", arr[i]);
	}
	return 0;
}
