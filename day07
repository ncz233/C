#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

////函数，非常非常重要  所有的库函数都是集成放在头文件里头的
//函数：子程序，一个或多个语句块组成，负责完成特定的任务，相对于其他代码，具有相对的独立性。
// 一般会有输入参数并有返回值，提供过程的封装和细节的隐藏。函数的特点
//f(x) = 2*x+1; 数学中的函数
//f(x,y) = x+y; 数学中的函数
// 
//C语言函数的分类
//1.库函数
//	频繁大量的动作，就不用自己写了，库里面提供了，写代码的效率就提升同时让C语言更能标准化
//	学习库函数 www.cplusplus.com ， http://zh.cppreference.com ，
//2.自定义函数
//	和库函数一样，有函数名，有返回值类型和函数参数。但是不一样的是这些都是我们自己来设计。这些给程序员一个很大的发挥空间
// 
//常用的库函数
// lo函数：输入输出函数如printf,scanf,getchar,putchar
// 字符串操作函数：如strcmp比较字符串，strlen求字符串长度
// 字符操作函数：如toupper小写转大写
// 内存操作函数：如memory内存的意思，memcpy,memcmp,memset内存设置
// 时间/日期函数：如time
// 数学函数：如sqrt开平方，pow求次方
// 其他库函数：如其他

//所有的函数都有： 函数的返回类型 函数名 函数的参数
//#include <string.h>
//int main()
//{
//	char a[] = { 0 };
//	char b[] = "holle word";
//	strcpy(a, b);
//	printf("%s\n", a);
//
//	return 0;
//}

//自定义函数
//	和库函数一样，有函数名，有返回值类型和函数参数。但是不一样的是这些都是我们自己来设计。这些给程序员一个很大的发挥空间
//ret_type fun_name(paral,*)
// {
//	statement;
// }
//ret_type  返回类型
//fun_name  函数名
//paral     函数参数
//

//写个函数可以找出两个整数的最大值、实参和形参的意义
//int get_max(int x, int y)//括号里的叫形参，形参时函数名后的变量，因为形式参数只有在被调用的过程中才实例化(分配内存单元)，所以叫形参。(形式参数当函数调用完后自动销毁)也可以认为生命周期。(因此形式参数只有在函数中有效)也可以认为是范围。
//{
//	int z = 0;
//	if (x>y)
//	{
//		z = x;
//	}
//	else
//	{
//		z = y;
//	}
//	return z;
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	//函数的调用
//	int max = get_max(a, b);
//	int max = get_max(3, 5+2);//函数的实参部分可以放常量，表达式
//	int max = get_max(2+3, get_max(6,7));//函数的实参部分也可以放函数
//	//不管在实参是何种类型的量，在进行函数调用时，他们都必须有确定的值，以便把这些值传送给形参
// 
//	printf("max = %d\n", max);
//
//	return 0;
//}

//交换2个整型变量
//写出问题了，x, y, 不会改变a， b。因为x和a， y和b他们的地址是不相等的，是独立的空间
// Swap在被调用的时候，实参传给形参，其实形参是实参的一份临时拷贝的值。改变形参，不能改变实参
//void Swap(int x, int y)//函数返回类型写成：void，表示函数不返回任何值，也不需要返回，可以返回：就写个return;就行
//{
//	int z = 0;
//	z = x;
//	x = y;//前面的是变量，后面的是赋值。
//	y = z;
//}
//
//int main()
//{
//int a = 10;
//int b = 20;
//printf("交换前：%d %d\n", a, b);
//Swap(a, b);
//printf("交换后：%d %d\n", a, b);
//
//return 0;
//}

//指针复习
//int main()
//{
//
//	int a = 10;//4个字节空间
//
//	int* pa = &a;//pa就是一个指针变量,记录了a的地址，可以用*pa就能找到a
//	*pa = 20;//*pa就是上面的a,
//
//	printf("%d\n", a);
//
//	return 0;
//}

//函数的调用
//什么情况下设计函数要传地址过去，在其他函数内部改变主函数内部的值需要。就是用传址函数
// 仅仅是调用那用传值函数。
//*x就能找到a，*y就能找到b。就相当于x的地址里是a的地址，y的地址是a的地址。
//void bian(int* x, int* y)//()里是形式参数 - 形参。
//{
//	int z = 0;
//	z = *x;
//	*x = *y;
//	*y = z;
//}
//
////Swap在被调用的时候，实参传给形参，其实形参是实参的一份临时拷贝的值。改变形参，不能改变实参
//void Swap(int x, int y)
//{
//	int z = 0;
//	z = x;
//	x = y;//前面的是变量，后面的是赋值。
//	y = z;
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	Swap(a, b);//传值调用
//	printf("交换前：%d %d\n", a, b);
//	bian(&a, &b);//传址调用。//()括号里是实际参数 - 实参
//	printf("交换后：%d %d\n", a, b);
//
//	return 0;//return不能同时返回2个值
//}

//函数的调用练习
//100 - 200素数 2 - n-1 之间的数字
//#include<math.h>
//int is_prime(int n)
//{
//	int m = 0;
//	for ( m = 2; m < sqrt(n); m++)
//	{
//		if (n%m == 0)
//		{
//			return 0;
//		}
//	}
//	return 1;
//}
//
//int main()
//{
//	int a = 0;
//	int b = 0;
//	for ( a = 100; a <= 200; a++)
//	{
//		if (is_prime(a) == 1)
//		{
//			b++;
//			printf("%d\n", a);
//		}
//	}
//	printf("%d\n", b);
//	return 0;
//}

//判断1000 - 2000 是不是闰年
//一个函数不写返回类型，默认返回int类型
// int runnian(int x)
//{
//	if ((0 == x%4 && x%100 != 0) || x%400 == 0)
//	{
//		return 1;
//	}
//	return 0;
//}
// int runnian(int x)
// {
//	 return ((0 == x % 4 && x % 100 != 0) || x % 400 == 0);//最简单的
//	
// }
//
//int main()
//{
//	int a = 0;
//	for ( a = 1000; a <= 2000; a++)
//	{
//		if (runnian(a) == 1)
//		{
//			printf("%d\n", a);
//		};
//	}
//	return 0;
//}

//函数查找二分查找
//int erfen(int x[], int y, int z)
//{
//	int left = 0;
//	int right = z - 1;
//
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (x[mid] > y)
//		{
//			right = mid - 1;
//		}
//		else if (x[mid] < y)
//		{
//			left = mid + 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;//找不到了
//}
//
//int main()
//{
//	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int b = 7;
//	int c = sizeof(a) / sizeof(a[0]);
//	//找到返回相应位置下标
//	//找不到返回-1
//	
//	int d = erfen(a,b,c);
//	if (-1 == d)
//	{
//		printf("找不到");
//	}
//	else
//	{
//		printf("找到了 %d\n", d);
//	}
//
//	return 0;
//}

//错误的版本，告诉我们：如果函数内部需要参数部分传过来某一个数组的元素个数，一定是在外面求好这个元素个数
// int erfen(int* x,int y) 这个是下面的的翻译
//int erfen(int x[], int y)//int x[]挂羊头卖狗肉，本质上是指针，而指针大小是4
//{
//	int c = sizeof(x) / sizeof(x[0]);//这里出问题了。这里计算4/指针第一个大小：4，所以c=1。 为什么不能在函数内部求，因为数组传的时候不会把所有的数组传过去，传的是数组首元素地址，传的是地址所以int x[]是指针，因为是指针我们不能求出个数来
//	int left = 0;
//	int right = c - 1;
//
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (x[mid] > y)
//		{
//			right = mid - 1;
//		}
//		else if (x[mid] < y)
//		{
//			left = mid + 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;//找不到了
//}
//
//int main()
//{
//	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };//数组是把许多数的地址放在一起，数组传参本质上还是传个地址过去，也是传址的效果
//	int b = 7;
//	
//	//数组a传参数，实际上传递的不是数组的本身
//	//仅仅传过去数组首元素的地址
//	//
//
//	int d = erfen(a, b);//传数组的时候传的是数组首元素的地址，数组首元素的地址是整型的地址应该是指针。
//	if (-1 == d)
//	{
//		printf("找不到");
//	}
//	else
//	{
//		printf("找到了 %d\n", d);
//	}
//
//	return 0;
//}

//每调用一次这个函数num加1
//在函数内部改变函数外部某些变量的时候，要传地址过去，一旦传地址过去就涉及到指针，什么时候传值、址，清楚了
//int add(int* p)
//{
//	(*p)++;
//}
//
//int main()
//{
//	int num = 0;
//	add(&num);
//	printf("%d\n", num);
//
//	add(&num);
//	printf("%d\n", num);
//
//	add(&num);
//	printf("%d\n", num);
//	return 0;
//}

//函数的嵌套调用和链式访问，函数不能嵌套定义:函数内不能定义一个函数
//函数嵌套
//void dier()
//{
//	printf("haha\n");
//	return;//viod不用返回值，返回也是：return;
//}
//
//int diyi()
//{
//	dier();
//	return 0;
//}
//
//int main()
//{
//	diyi();
//	return 0;
//}

//函数链式访问：把一个函数的返回作为另一个函数的参数
//#include <string.h>
//int main()
//{
//	//int len = strlen("abc");//求字符串长度
//	//printf("%d\n", len);
//
//	////链式访问
//	//printf("%d\n", strlen("abc"));
//
//	//char a[20] = { 0 };
//	//char b[] = "holle word";
//	//strcpy(a, b);//strcpy:复制。把b内容复制到a中
//	//printf("%s\n", a);
//
//	//printf("%s\n", strcpy(a, b));
//
//	printf("%d", printf("%d", printf("%d", 43)));//printf函数返回的是打印在屏幕上的字符的个数，第一个prinft打印43，第二个看打印个数是2，打印2，第三看打印的个数是1，打印1.
//
//	return 0;
//}

//函数的声明和定义
//int main()
//{
//	int a = 10;
//	int b = 20;
//	//代码是从上往下扫描的，没见过其他函数需要声明一下。如果定义在前面不需要声明，反之。一般声明放在头文件xx.h如：include "add.h"，就是引用头文件
//	//函数声明一下 - 告知 函数叫什么，参数是什么，返回类型是什么。告诉它有没有，我就告诉你有没有。真的有没有是去决定以的
//	int add(int, int);
//
//	int c = add(a, b);
//	printf("%d\n", c);
//	
//	return 0;
//}
//
////函数的定义
//int add(int x, int y)
//{
//	return x + y;
//}

