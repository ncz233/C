#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//动态开辟的空间，两种回收方式
// 主动free
// 程序结束

//常见的动态内存错误
// 对NULL指针的解引用操作                           
// 对动态开辟空间的越界访问
// 使用free释放非动态开辟的框架
// 使用free释放动态内存中的一部分
// 对同一块动态开辟的空间，多次释放
// 动态开辟的空间忘记释放
//
//int main()
//{
//	int* p = (int*)malloc(100000000);
//	//对malloc函数的返回值，做判断
//	int i = 0;
//	for ( i = 0; i < 10; i++)
//	{
//		p[1] = i;
//	}
//
//	return 0;
//}

//对动态开辟空间的越界访问
//int main()
//{
//	int* p = (int*)malloc(10*sizeof(int));
//	if (p == NULL)
//	{
//		return 1;
//	}
//	//开辟的是40个字节，这里写的是元素
//	//存在越界访问不能做
//	int i = 0;
//	for ( i = 0; i < 40; i++)
//	{
//		p[1] = i;
//	}
//	free(p);
//	return 0;
//}

//使用free释放非动态开辟的框架
//int main()
//{
//	int a[10] = { 0 };
//	int* p = a;
//	//使用
//	free(p);//err
//	return 0;
//}

//使用free释放动态内存中的一部分
//int main()
//{
//	int* p = malloc(10 * sizeof(int));
//	if (p == NULL)
//	{
//		return 1;
//	}
//	int i = 0;
//	for ( i = 0; i < 5; i++)
//	{
//		*p++ = i;
//	}
//	free(p);
//	p = NULL;
//
//	return 0;
//}

// 对同一块动态开辟的空间，多次释放
//int main()
//{
//	int* p = malloc(10 * sizeof(int));
//	//使用
//	//释放
//	free(p);
//	p = NULL;
//	//释放
//	free(p);//没有p = null会报错，因为释放null会什么事情都没发生,所以释放完后等于空指针会好
//
//	return 0;
//}

// 动态开辟的空间忘记释放
//void test()
//{
//	int* p = (int*)malloc(10);
//	if (NULL == p)
//	{
//		return;
//	}
//	//使用
//	//忘记释放，出了这个函数所有东西都会销毁，但是动态内存不会销毁
//	//指向的动态内存的指针销毁了，这个动态内存就不会在被找到了，报错了
//	//如果是服务器(每天都开着的)内存泄露一直在吃我们的内存，越用越卡最终死机
//}
//
//int main()
//{
//	test();
//	//
//	return 0;
//}

//经典笔试题目
// 题目1
//void getmemory(char* p)
//{
//	p = (char*)malloc(100);
//}//内存泄漏
//void test(void)
//{
//	char* str = NULL;
//	getmemory(str);
//	//出getmemory(str)传的是值，所以出函数是全销毁的
//	strcpy(str, "hello world");//这里用的是空指针，打印，但是空指针不能打印
//	printf(str);
//}
//int main()
//{
//	test();
//	return 0;
//}
//理解
// str传给getmemory函数的时候是值传递，所以个体memory函数的形参p是str的一份临时拷贝。
// 在getmemory函数内部动态申请空间的地址，存放在p中，不会影响外边str
// 所以当getmemory函数返回之后，str依然是null。所以strcpy会失败
// 当getmemory函数返回之后，形参p销毁，使得动态开辟的100字节存在内存泄露，无法释放。
//

//改：1
//char* getmemory(char* p)//改成char*
//{
//	p = (char*)malloc(100);
//	return p;//返回p
//}
//void test(void)
//{
//	char* str = NULL;
//	str = getmemory(str);//加上str
//	//出getmemory(str)传的是值，所以出函数是全销毁的
//	strcpy(str, "hello world");//这里用的是空指针，打印，但是空指针不能打印
//	printf(str);//字符指针放在这里没问题，
//	free(str);//加上后面的就行了
//	str = NULL;
//}
//int main()
//{
//	test();
//	return 0;
//}

//改：2
//void getmemory(char** p)//因为是地址传过去，所以用二级指针接收
//{
//	*p = (char*)malloc(100);//解引用找到str
//}
//void test(void)
//{
//	char* str = NULL;
//	getmemory(&str);//传地址过去
//	strcpy(str, "hello world");
//	printf(str);
//	free(str);
//	str = NULL;
//}
//int main()
//{
//	test();
//	return 0;
//}

//题目2
//返回栈空间地址的问题
//getmemory函数内部创建的数组输在栈区上创建的
//出了函数，p数字的空间就还给了操作系统
//返回的地址是没有实际的意义，如果通过返回的地址，去访问内存就是非法访问内存的
//
//char* getmemory(void)
//{
//	char p[] = "hello world";
//	return p;
//}
//void test(void)
//{
//	char* str = NULL;
//	str = getmemory();
//	printf(str);
//}
//int main()
//{
//	test();
//	return 0;
//}

//第3题
//没free
//void getmemory(char** p,int num)
//{
//	*p = (char*)malloc(num);
//}
//void test(void)
//{
//	char* str = NULL;
//	getmemory(&str,100);
//	strcpy(str, "hello world");
//	printf(str);
//	free(str);//加了
//	str = NULL;
//}
//int main()
//{
//	test();
//	return 0;
//}

//第4题
//void test(void)
//{
//	char* str = (char*)malloc(100);
//	strcpy(str, "hello");
//	free(str);//free本身不会给str置为空
//	str = NULL;//加了
//	if (str != NULL)
//	{
//		strcpy(str, "world");
//		printf(str);
//	}
//}
//int main()
//{
//	test();
//	return 0;
//}

//c/c++开辟空间的方式
//内核空间：用户不能读取的
//栈区：向下增长，局部变量
// 内存映射区
//堆区：向上增长，动态内存
//数据段(静态区)：全局数据，静态数据
//代码段：可执行代码，只读常量,存放函数体的二进制代码
//

//小练习
//#define INRTP int*//定义符号
//int main()
//{
//	typedef int* inrtp;//重命名
//	INRTP a, b;//int*a,b
//	//INRTP是替换成int*
//	inrtp c, d;//int*c,*d
//	//重命名是一个完整的类型
//
//	return 0;
//}

//柔性数组
//结构中的最后一个元素允许是未知大小的数组
//特点：
// 结构中的柔性数组成员全面必须至少一个其他成员
// sizeof返回的这种结构大小不包括柔性数组的内存
// 包含柔性数组成员的结构用malloc()函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小

// 两种都是可以的
//struct S
//{
//	int n;
//	int arr[];//大小未知
//};
//struct S
//{
//	int n;//4
//	int arr[0];//大小未知
//};
//
//int main()
//{
//	//期望arr的大小是10个整型
//	struct S* ps = malloc(sizeof(struct S) + 10 * sizeof(int));
//	ps->n;
//	int i = 0;
//	for ( i = 0; i < 10; i++)
//	{
//		ps->arr[i] = i;
//	}
//	//增加
//	struct S* ptr = realloc(ps, sizeof(struct S) + 20 * sizeof(int));
//	if (ptr != NULL)
//	{
//		ps = ptr;
//	}
//	//使用
//
//	//释放
//	free(ps);
//	ps = NULL;
//
//	//struct S s = { 0 };
//	//printf("%d\n", sizeof(s));
//	return 0;
//}

//仿制柔性数组 - 容易出错
//内存也容易出错 - 有可能会出现内存不连续性
//struct S
//{
//	int n;
//	int* arr;
//};
//int main()
//{
//	struct S* ps = (struct S*)malloc(sizeof(struct S));
//	if (ps == NULL)
//	{
//		return 1;
//	}
//	ps->n = 10;
//	ps->arr = (int*)malloc(10 * sizeof(int));
//	if (ps ->arr == NULL)
//	{
//		return 1;
//	}
//	int i = 0;
//	for ( i = 0; i < 10; i++)
//	{
//		ps->arr[i] = i;
//	}
//	//增加
//	int* ptr = realloc(ps->arr, 20 * sizeof(int));
//	if (ptr != NULL)
//	{
//		ps->arr = ptr;
//	}
//	//使用
//
//	//释放
//	free(ps->arr);
//	ps->arr = NULL;
//	free(ps);
//	ps = NULL;
//	return 0;
//}

//练习
//X
//int main()
//{
//	int n = 0;
//	while (scanf("%d", &n) != EOF)//多组输入
//	{
//		int i = 0;
//		for ( i = 0; i < n; i++)
//		{
//			int j = 0;
//			for ( j = 0; j < n; j++)
//			{
//				if (i == j)
//				{
//					printf("*");
//				}
//				else if (j+i == n-1)
//				{
//					printf("*");
//				}
//				else
//				{
//					printf(" ");
//				}
//			}
//			printf("\n");
//		}
//	}
//	return 0;
//}

//公务员面试
//int main()
//{
//	int sum = 0;
//	int score = 0;
//	int i = 0;
//	int max = 0;
//	int min = 100;
//
//	for ( i = 0; i < 7; i++)
//	{
//		scanf("%d", &score);
//		sum += score;
//		if (score > max)
//		{
//			max = score;
//		}
//		if (score < min)
//		{
//			min = score;
//		}
//	}
//	printf("%.2f\n", (sum - max - min) / 5.0);
//
//	return 0;
//}

//年月日
int main()
{
	int y = 0;
	int m = 0;
	//31,28,31,30,......
	int days[13] = { 0,31,28,31,20,31,30,31,31,20,31,30,31 };
	//闰年2月+1
	while (scanf("%d %d", &y, &m) != EOF);
	{
		int day = days[m];
		if (m == 2)
		{
			if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))
			{
				day += 1;
			}
		}
		
		printf("%d\n", day);
	}

	return 0;
}
