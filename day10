#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//二维数组

//int main()
//{
//	//创建
//	//int arr[3][4];//3行4列,一共12个元素，每个元素类型是int
//	//char ch[3][10];
//	//初始化 - 创建的同时给赋值
//	//int a[3][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
//	//int a[3][4] = { 1,2,3,4,5,6,7};//不完全初始化 - 后面补0，字符数组补0相当于\0
//	//int a[][4] = { {1,2},{5,6},{9,10} };//一行一行初始化，里面的大括号是表示行。列是一行有对少元素，不能省略
//	
//	//二维数组的使用 
//	//二维数组的下标是：第一行是0，第二行是1，第三行.... 。第一列是0，第二列是1，第三列.... 。确定一元素是第几行第几列
//	//int a[][4] = { {1,2},{5,6},{9,10} };
//	//int i = 0;
//	//int j = 0;
//	//for ( i = 0; i < 3; i++)//因为是从行是从0开始的，所以是i = 0；
//	//{
//	//	for ( j = 0; j < 4; j++)//列也是如此。
//	//	{
//	//		printf("%d ", a[i][j]);
//	//	}
//	//	printf("\n");
//	//}
//
//	//二位数组在内存中是怎么存储的。
//	//二维数组在内存中也是连续存放的
//	//一行内部连续，跨行也是连续的
//	//在内存内部存储是连续的，就是把二维数组看成一维数组连续存放的，这就是为什么行可以省略而列不行，列是明确知道一行是有几个元素的。如果没输入列，那么在内存中二维数组就不知道自己的行从那里开始放。列不能省略。
//	//行可以省略，因为二维数组在内存中看的是列，只要列确定就可以随便放，放完就行，不关心几行。
//
//	int a[][4] = { {1,2},{5,6},{9,10} };
//	int i = 0;
//	int j = 0;
//	int* p = &a[0][0];//P代表是数组内第一个元素
//	for ( i = 0; i < 12; i++)
//	{
//		printf("%d ", *p);//打印p是打印数组第一个元素
//		p++;//向后挪动一个整型，因为p是整型指针，所以加1会跳过一个整节
//	}
//
//	//for ( i = 0; i < 3; i++)//因为是从行是从0开始的，所以是i = 0；
//	//{
//	//	for ( j = 0; j < 4; j++)//列也是如此。
//	//	{
//	//		printf("&a[%d][%d] = %p\n", i, j, &a[i][j]);//相差4，因为每个元素类型是整型，而整型的大小是4个字节
//	//	}
//	//}
//
//	return 0;
//}

//数组作为函数参数
//void paixu(int x[], int y)//数组名是首元素地址
//{
//	//确定趟数
//	int i = 0;
//	int flag = 1;
//	for ( i = 0; i < y -1; i++)
//	{
//		//一趟冒泡排序
//		int j = 0;
//		for ( j = 0; j < y-1-i; j++)
//		{
//			if (x[j]>x[j+1])
//			{
//				//交换
//				int tmp = x[j];//tmp是临时变量
//				x[j] = x[j + 1];//交换的是值，地址是不能随便交换的。
//				x[j + 1] = tmp;
//				flag = 0;
//			}
//		}
//		if (flag == 1)
//		{
//			break;
//		}
//	}
//
//}

//int main()
//{
//	//int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
//	int arr[10] = { 0,1,2,3,4,5,6,7,8,9 };//如果是有序的那还是要继续计算的。浪费了时间，效率低了。
//	
//	//冒泡排序：两两相邻的元素进行比较，并且可能的话需要交换
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	paixu(arr, sz);
//	return 0;
//}

//数组名是什么
//数组名是数组首元素的地址
//但是有2个列外
//1.sizeof(数组名) - 表示整个数组 - 计算的是整个数组的大小单位是字节
//2.&数组名 - 数组名表示整个数组 - 取出的是整个数组的地址
//int main()
//{
//	int arr[10] = { 0 };
//	printf("%p\n", &arr);//取所有数组地址
//	printf("%p\n", &arr + 1);//与上一个相差28，但是这个28是16进制的，十进制是40
//
//	printf("%p\n", arr);//数组名
//	printf("%p\n", arr + 1);//与上一个相差4
//	//printf("%p\n", &arr[0]);//数组首地址
//	//为什么一样了呢，因为所有数组地址是要从数组首地址开始的，值一样是正常的，但是意义是不一样的
//	
//	//int sz = sizeof(arr);
//	//printf("%d\n", sz);//数组名不是首元素地址，为什么不是4，是40呢，因为是列外1
//
//	//printf("%p\n", &arr[0]);//打印数组首元素的地址
//	//printf("%p\n", arr);//打印数组名
//	//打印出来是一样的，说明数组名就是数组首元素地址
//
//	return 0;
//}

//三子棋
